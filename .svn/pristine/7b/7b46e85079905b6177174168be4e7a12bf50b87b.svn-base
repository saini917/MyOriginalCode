package NRDA_NewConnection;

import java.util.List;

import org.apache.log4j.Logger;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.Reporter;

import GenericLibrary.CommonLibrary;
import GenericLibrary.ExcelDataDriver;

public class ToVerifyConnectionDetailsTab_SC_08_TC_12 extends CommonLibrary 
{
	ExcelDataDriver excel=new ExcelDataDriver();
	Logger log=Logger.getLogger("devpinoyLogger");
	WebDriverWait wait = new WebDriverWait(driver,50);

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "Action image".
	 * @author deepak saini
	 * @since 2017-09-21
	 */
	/*****************************************************************************************************/
	@FindBy(xpath="//td[@class='rightColWithLeftPad']/table/tbody/tr/td/form/div/div[2]/div[2]/div/div/h3/a/../following-sibling::div/div/div/table/thead/tr/th/span/../../../following-sibling::tbody/tr/td/span[contains(text(),'PENDING')]/../following-sibling::td/a/img")
	private WebElement actionimg;

	public void clickOnActionImg() throws InterruptedException
	{
		wait.until(ExpectedConditions.visibilityOf(actionimg));
		wait.until(ExpectedConditions.elementToBeClickable(actionimg));
		Assert.assertTrue(actionimg.isDisplayed());
		HighlightOnElement(actionimg);
		Assert.assertTrue(actionimg.isEnabled());
		actionimg.click();
		Reporter.log("Click on 'Action' icon link shown in Pending Application Record",true);
		waitForSomeTime();
	}

	@FindBy(xpath="//div[@id='inboxForm:Nb']/div/div/div/center/table/tbody/tr/td/label")
	private List<WebElement> actioncommentlabel;

	@FindBy(xpath="//div[@id='inboxForm:Nb']/div/div/div/center/table/tbody/tr/td/a/span[contains(text(),'View Property Map')]")
	private WebElement map;

	@FindBy(xpath="(//div[@id='inboxForm:Nb']/div/div/div/center/table/tbody/tr/td/span)[3]")
	private WebElement uploaddocumentlabel;

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "click on dropdown".
	 * @author deepak saini
	 * @since 2017-09-22
	 */
	/*****************************************************************************************************/
	@FindBy(xpath="//div[@id='inboxForm:Nb']/div/div/div/center/table/tbody/tr/td/label[contains(text(),'Select Action')]/../following-sibling::td/div/div/span")
	private WebElement clickonselectactiondrop;

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "select value".
	 * @author deepak saini
	 * @since 2017-09-22
	 */
	/*****************************************************************************************************/
	@FindBy(xpath="//ul[@class='ui-selectonemenu-items ui-selectonemenu-list ui-widget-content ui-widget ui-corner-all ui-helper-reset']/li")
	private List<WebElement> selectdropdownvalue;


	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "button".
	 * @author deepak saini
	 * @since 2017-09-22
	 */
	/*****************************************************************************************************/
	@FindBy(xpath="//div[@id='inboxForm:Nb']/div/center/button/span")
	private List<WebElement> button;

	public void verifyDisplayList() throws InterruptedException
	{
		for(WebElement list:actioncommentlabel)	
		{
			HighlightOnElement(list);
			Assert.assertTrue(list.isDisplayed());
			waitForSomeTime();
			Reporter.log("Expected result:"+list.getText(),true);
		}
		wait.until(ExpectedConditions.visibilityOf(map));
		Assert.assertTrue(map.isDisplayed());
		HighlightOnElement(map);
		Reporter.log("Expected result:"+map.getText(),true);
		
		wait.until(ExpectedConditions.visibilityOf(uploaddocumentlabel));
		Assert.assertTrue(uploaddocumentlabel.isDisplayed());
		HighlightOnElement(uploaddocumentlabel);
		Reporter.log("Expected result:"+uploaddocumentlabel.getText(),true);
		
		wait.until(ExpectedConditions.visibilityOf(clickonselectactiondrop));
		wait.until(ExpectedConditions.elementToBeClickable(clickonselectactiondrop));
		Assert.assertTrue(clickonselectactiondrop.isDisplayed());
		HighlightOnElement(clickonselectactiondrop);
		Assert.assertTrue(clickonselectactiondrop.isEnabled());
		clickonselectactiondrop.click();
		waitForSomeTime();
		
		for(int i=1;i<selectdropdownvalue.size();i++)
		{
			String value=selectdropdownvalue.get(i).getText();
			Reporter.log("Expected result:"+value,true);
			waitForSomeTime();
		}
		
		for(int i=0;i<button.size();i++)
		{
			String value=button.get(i).getText();
			Reporter.log("Expected result:"+value,true);
			waitForSomeTime();
		}
	}

}
