package NRDA_NewConnection;

import java.io.IOException;
import org.apache.log4j.Logger;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.Reporter;

import GenericLibrary.CommonLibrary;
import GenericLibrary.ExcelDataDriver;

public class ToVerifyConnectionDetailsTab_SC_07_TC_11 extends CommonLibrary
{
	ExcelDataDriver excel=new ExcelDataDriver();
	Logger log=Logger.getLogger("devpinoyLogger");
	WebDriverWait wait = new WebDriverWait(driver,50);

	/****************************************************************************************************/
	/**
	 * This is the xpath of the WebElement "Pending for Payment"
	 * @author deepak saini
	 * @Date: 03-01-2018
	 */
	/****************************************************************************************************/	
	@FindBy(xpath="//form[@id='form0']/div/table/tbody/tr/td[@class='leftCol']/span/div/div/div/ul/li/a[contains(text(),'Pending For Payment/भुगतान हेतु अपूर्ण')]")
	private WebElement pendingforpayment;

	public void clickOnPendingPayment() throws InterruptedException
	{
		wait.until(ExpectedConditions.visibilityOf(pendingforpayment));
		wait.until(ExpectedConditions.elementToBeClickable(pendingforpayment));
		HighlightOnElement(pendingforpayment);
		pendingforpayment.click();
		Reporter.log("Click on 'Pending for payment' menu shown in application menu 'Payment",true);
		waitForSomeTime();
	}
	
	/****************************************************************************************************/
	/**
	 * This is the xpath of the WebElement "Search Input box"
	 * @author deepak saini
	 * @Date: 04-01-2018
	 */
	/****************************************************************************************************/	
	@FindBy(xpath="//form[@id='form0']/div/table/tbody/tr/td[@class='rightColWithLeftPad']/span/div/div/div/div/table/tbody/tr/td/span[contains(text(),'Enter Application Number :')]/../following-sibling::td/input")
	private WebElement searchinputbox;
	
	public void enterCustomerID() throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		wait.until(ExpectedConditions.visibilityOf(searchinputbox));
		Assert.assertTrue(searchinputbox.isDisplayed());
		HighlightOnElement(searchinputbox);
		Assert.assertTrue(searchinputbox.isEnabled());
		excel.getExcelData(searchinputbox,"Customer ID",0,1);
	}
	
	/****************************************************************************************************/
	/**
	 * This is the xpath of the WebElement "Search button"
	 * @author deepak saini
	 * @Date: 04-01-2018
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//form[@id='form0']/div/table/tbody/tr/td[@class='rightColWithLeftPad']/span/div/div/div/div/table/tbody/tr/td/span[contains(text(),'Enter Application Number :')]/../following-sibling::td/input/../following-sibling::td/button/span[contains(text(),'Search')]")
	private WebElement searchbtn;
	
	public void clickOnSearchBtn() throws InterruptedException
	{
		wait.until(ExpectedConditions.visibilityOf(searchbtn));
		wait.until(ExpectedConditions.elementToBeClickable(searchbtn));
		Assert.assertTrue(searchbtn.isDisplayed());
		HighlightOnElement(searchbtn);
		Assert.assertTrue(searchbtn.isEnabled());
		searchbtn.click();
		waitForSomeTime();
	}
	
	/****************************************************************************************************/
	/**
	 * This is the xpath of the WebElement "click on Water And Sewerage connection"
	 * @author deepak saini
	 * @Date: 04-01-2018
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//form[@id='form0']/div/table/tbody/tr/td[@class='rightColWithLeftPad']/span/div/div/div/h3/a[contains(text(),'WATER AND SEWERAGE CONNECTION')]/preceding-sibling::span")
	private WebElement waterandsewerage;
	
	public void verifyWaterAndSewerageConnExist()
	{
		wait.until(ExpectedConditions.visibilityOf(waterandsewerage));
		wait.until(ExpectedConditions.elementToBeClickable(waterandsewerage));
		Assert.assertTrue(waterandsewerage.isDisplayed());
		HighlightOnElement(waterandsewerage);
		Assert.assertTrue(waterandsewerage.isEnabled());
		Actions act=new Actions(driver);
		act.click(waterandsewerage).build().perform();
	}
	
	/****************************************************************************************************/
	/**
	 * This is the xpath of the WebElement "Proceed to payment"
	 * @author deepak saini
	 * @Date: 04-01-2018
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//form[@id='form0']/div/table/tbody/tr/td[@class='rightColWithLeftPad']/span/div/div/div/h3/a[contains(text(),'WATER AND SEWERAGE CONNECTION')]/preceding-sibling::span/../following-sibling::div/div/div/table/thead/tr/th/span/../../../following-sibling::tbody/tr/td/button/span[contains(text(),'Proceed to Payment')]")
	private WebElement proceedtopay;
	
	public void clickOnProceedToPayment() throws InterruptedException
	{
		wait.until(ExpectedConditions.visibilityOf(proceedtopay));
		wait.until(ExpectedConditions.elementToBeClickable(proceedtopay));
		Assert.assertTrue(proceedtopay.isDisplayed());
		HighlightOnElement(proceedtopay);
		Assert.assertTrue(proceedtopay.isEnabled());
		proceedtopay.click();
		Reporter.log("Click on 'Proceed to Payment'",true);
		waitForSomeTime();
	}
	
	/****************************************************************************************************/
	/**
	 * This is the xpath of the WebElement "Select payment mode"
	 * @author sarvesh.nellore
	 * @Date: 12-09-2017
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//form[@id='form0']/div/table/tbody/tr/td[@class='rightColWithLeftPad']/span/span/span/div/div/table/tbody/tr/td[1]/label[contains(text(),'Select Payment Mode')]/../following-sibling::td/select")
	private WebElement paymentmodeOnline;

	public void selectOnlinePayment() throws InterruptedException
	{
		wait.until(ExpectedConditions.visibilityOf(paymentmodeOnline));
		HighlightOnElement(paymentmodeOnline);
		SelectVisibleText(paymentmodeOnline,"Pay Online");
		Reporter.log("Select the payment mode as 'Online'",true);
		waitForSomeTime();
	}

	/****************************************************************************************************/
	/**
	 * This is the xpath of the WebElement "Make Payment"
	 * @author sarvesh.nellore
	 * @Date: 12-09-2017
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//button/span[contains(text(),'Make Payment')]")
	private WebElement makepayment;

	public void clickOnMakePayment() throws InterruptedException
	{
		wait.until(ExpectedConditions.visibilityOf(makepayment));
		wait.until(ExpectedConditions.elementToBeClickable(makepayment));
		Assert.assertTrue(makepayment.isDisplayed());
		HighlightOnElement(makepayment);
		Assert.assertTrue(makepayment.isEnabled());
		makepayment.click();
		Reporter.log("Click on 'Make a Payment'",true);
		waitForSomeTime();
	}
	
	/****************************************************************************************************/
	/**
	 * This is the xpath of the WebElement "card number"
	 * @author sarvesh.nellore
	 * @Date: 03-01-2018
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//div[@id='credit']/div/fieldset/fieldset/div/label[contains(text(),'Card Number')]/following-sibling::input")
	private WebElement cardnumber;
	
	
	/****************************************************************************************************/
	/**
	 * This is the xpath of the WebElement "Name on card"
	 * @author sarvesh.nellore
	 * @Date: 03-01-2018
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//div[@id='credit']/div/fieldset/fieldset/div/label[contains(text(),'Name on Card')]/following-sibling::input")
	private WebElement nameoncard;
	
	/****************************************************************************************************/
	/**
	 * This is the xpath of the WebElement "CVV Number"
	 * @author sarvesh.nellore
	 * @Date: 03-01-2018
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//div[@id='credit']/div/fieldset/fieldset/div/label[contains(text(),'CVV Number')]/following-sibling::input")
	private WebElement cvvnumber;
	

	/****************************************************************************************************/
	/**
	 * This is the xpath of the WebElement "Expiry Date"
	 * @author sarvesh.nellore
	 * @Date: 03-01-2018
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//div[@id='credit']/div/fieldset/fieldset/p/label[contains(text(),'Expiry Date')]/following-sibling::select[@id='cexpiry_date_month']")
	private WebElement month;
	
	@FindBy(xpath="//div[@id='credit']/div/fieldset/fieldset/p/label[contains(text(),'Expiry Date')]/following-sibling::select[@id='cexpiry_date_year']")
	private WebElement year;
	
	/****************************************************************************************************/
	/**
	 * This is the xpath of the WebElement "Pay now"
	 * @author sarvesh.nellore
	 * @Date: 03-01-2018
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//div[@id='credit']/div/input")
	private WebElement paynow;
	
	public void enterCardDetail() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		wait.until(ExpectedConditions.visibilityOf(cardnumber));
		HighlightOnElement(cardnumber);
		Assert.assertTrue(cardnumber.isEnabled());
		excel.getExcelData(cardnumber,"Card Details",1,1);
		
		wait.until(ExpectedConditions.visibilityOf(nameoncard));
		HighlightOnElement(nameoncard);
		Assert.assertTrue(nameoncard.isEnabled());
		excel.getExcelData(nameoncard,"Card Details",1,2);
		
		wait.until(ExpectedConditions.visibilityOf(cvvnumber));
		HighlightOnElement(cvvnumber);
		Assert.assertTrue(cvvnumber.isEnabled());
		excel.getExcelData(cvvnumber,"Card Details",1,3);
		
		SelectVisibleText(month,"May (5)");
		SelectVisibleText(year,"2020");
		
		wait.until(ExpectedConditions.visibilityOf(paynow));
		wait.until(ExpectedConditions.elementToBeClickable(paynow));
		HighlightOnElement(paynow);
		Assert.assertTrue(paynow.isEnabled());
		paynow.click();
		Reporter.log("1. User should be able to make the payment successfully. \n 2. A receipt should be visible after making successfull payment",true);
		waitForSomeTime();
	}
	
	/****************************************************************************************************/
	/**
	 * This is the xpath of the WebElement "application status"
	 * @author sarvesh.nellore
	 * @Date: 03-01-2018
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//form[@id='form0']/div/table/tbody/tr/td[@class='leftCol']/span/div/div/div/ul/li/a[contains(text(),'Application Status/आवेदन की स्थिति')]")
	private WebElement applicationstatus;
	
	public void clickOnApplicationStatus() throws InterruptedException
	{
		
		wait.until(ExpectedConditions.visibilityOf(applicationstatus));
		wait.until(ExpectedConditions.elementToBeClickable(applicationstatus));
		HighlightOnElement(applicationstatus);
		Assert.assertTrue(applicationstatus.isEnabled());
		applicationstatus.click();
		Reporter.log("click on Application Status menu",true);
		waitForSomeTime();
		waitForSomeTime();
	}
	
	/****************************************************************************************************/
	/**
	 * This is the xpath of the WebElement "Search Input box"
	 * @author deepak saini
	 * @Date: 04-01-2018
	 */
	/****************************************************************************************************/	
	@FindBy(xpath="//form[@id='form0']/div/table/tbody/tr/td[@class='rightColWithLeftPad']/span/div/div/table/tbody/tr/td/span[contains(text(),'Enter Application Number :')]/../following-sibling::td/input")
	private WebElement searchbox;
	
	public void customerID() throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		wait.until(ExpectedConditions.visibilityOf(searchbox));
		Assert.assertTrue(searchbox.isDisplayed());
		HighlightOnElement(searchbox);
		Assert.assertTrue(searchbox.isEnabled());
		excel.getExcelData(searchbox,"Customer ID",0,1);
	}
	
	/****************************************************************************************************/
	/**
	 * This is the xpath of the WebElement "Search button"
	 * @author deepak saini
	 * @Date: 04-01-2018
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//form[@id='form0']/div/table/tbody/tr/td[@class='rightColWithLeftPad']/span/div/div/table/tbody/tr/td/span[contains(text(),'Enter Application Number :')]/../following-sibling::td/input/../following-sibling::td/button/span[contains(text(),'Search')]")
	private WebElement searchbtn1;
	
	public void clickOnSearchBtn1() throws InterruptedException
	{
		wait.until(ExpectedConditions.visibilityOf(searchbtn1));
		wait.until(ExpectedConditions.elementToBeClickable(searchbtn1));
		Assert.assertTrue(searchbtn1.isDisplayed());
		HighlightOnElement(searchbtn1);
		Assert.assertTrue(searchbtn1.isEnabled());
		searchbtn1.click();
		waitForSomeTime();
	}
	
	/****************************************************************************************************/
	/**
	 * This is the xpath of the WebElement "Submitted"
	 * @author deepak saini
	 * @Date: 04-01-2018
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//form[@id='form0']/div/table/tbody/tr/td[@class='rightColWithLeftPad']/span/div/h3/a[contains(text(),'Submitted Applications')]/preceding-sibling::span")
	private WebElement submitted;
	
	/****************************************************************************************************/
	/**
	 * This is the xpath of the WebElement "Water And Sewerage Connection"
	 * @author deepak saini
	 * @Date: 04-01-2018
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//form[@id='form0']/div/table/tbody/tr/td[@class='rightColWithLeftPad']/span/div/h3/a[contains(text(),'Submitted Applications')]/preceding-sibling::span/../following-sibling::div/div/h3/a[contains(text(),'WATER AND SEWERAGE CONNECTION')]/preceding-sibling::span")
	private WebElement waterAndsewerage;
	
	@FindBy(xpath="//form[@id='form0']/div/table/tbody/tr/td[@class='rightColWithLeftPad']/span/div/h3/a[contains(text(),'Submitted Applications')]/preceding-sibling::span/../following-sibling::div/div/h3/a[contains(text(),'WATER AND SEWERAGE CONNECTION')]/preceding-sibling::span/../following-sibling::div/div/div/table/tbody/tr/td/span[contains(text(),'AMOUNT PAID')]")
	private WebElement status;
	
	public void verifyStatus() throws InterruptedException
	{
		wait.until(ExpectedConditions.visibilityOf(submitted));
		wait.until(ExpectedConditions.elementToBeClickable(submitted));
		Assert.assertTrue(submitted.isDisplayed());
		HighlightOnElement(submitted);
		Assert.assertTrue(submitted.isEnabled());
		Actions act=new Actions(driver);
		act.click(submitted).build().perform();
		
		wait.until(ExpectedConditions.visibilityOf(waterAndsewerage));
		wait.until(ExpectedConditions.elementToBeClickable(waterAndsewerage));
		Assert.assertTrue(waterAndsewerage.isDisplayed());
		HighlightOnElement(waterAndsewerage);
		Assert.assertTrue(waterAndsewerage.isEnabled());
		Actions act1=new Actions(driver);
		act1.click(waterAndsewerage).build().perform();
		waitForSomeTime();
		
		wait.until(ExpectedConditions.visibilityOf(status));
		wait.until(ExpectedConditions.elementToBeClickable(status));
		Assert.assertTrue(status.isDisplayed());
		HighlightOnElement(status);
		Reporter.log("Status:"+status.getText(),true);
	}
}
