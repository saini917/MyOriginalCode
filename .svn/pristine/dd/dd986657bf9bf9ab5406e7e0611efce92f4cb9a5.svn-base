package GenericLibrary;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.openqa.selenium.WebElement;

/**
 * @author deepak.saini
 */
public class ExcelDataDriver extends WebdriverCommonDriverLibrary
{
	String filepath="C:\\ILFS\\NRDA\\workspace\\NRDA_FRAMEWORK\\HRMS_PROJECT\\src\\test\\resources\\HRMS_TESTDATA\\HRMS_TESTDATA.xlsx"; //This is test data file path
	//static String filepath1=""; //This is test data file path

	private static XSSFSheet ExcelWSheet;
	private static XSSFWorkbook ExcelWBook;
	private static XSSFCell Cell;
	@SuppressWarnings("unused")
	private static XSSFRow Row;



	/**
	 * getExcelData() is used to fetch the data from the excelSheet.
	 * @param SheetName
	 * @param rowNum
	 * @param colNum
	 * @return
	 * @throws IOException
	 * @author deepak.saini
	 * @throws InvalidFormatException 
	 * @throws EncryptedDocumentException 
	 * @since 2017-06-15
	 */

	public String getExcelData(WebElement element,String sheet,int colNum,int rowNum) throws IOException, EncryptedDocumentException, InvalidFormatException
	{
		WebElement searchbox = element;
		HighlightOnElement(element);
		FileInputStream file=new FileInputStream(filepath);
		Workbook wb=WorkbookFactory.create(file);
		Sheet sh=wb.getSheet(sheet);
		DataFormatter formatter = new DataFormatter();
		String keyword = formatter.formatCellValue(sh.getRow(colNum).getCell(rowNum)).trim();
		searchbox.sendKeys(keyword);
		return keyword; 
	}


	/**
	 * setExcelData() is used to write the data in the excelSheet.
	 * @param SheetName
	 * @param rowNum
	 * @param colNum
	 * @param data
	 * @throws IOException
	 * @author deepak.saini
	 * @throws InvalidFormatException 
	 * @throws EncryptedDocumentException 
	 * @since 2017-06-15
	 */

	@SuppressWarnings({ "deprecation", "static-access" })
	public void setExcelData(String data,int rownum,int colnum,String Sheetname) throws EncryptedDocumentException, InvalidFormatException, IOException
	{

		FileInputStream fis=new FileInputStream(filepath);
		Workbook wb=WorkbookFactory.create(fis);
		Sheet sh=wb.getSheet("Customer ID");
		Row row=sh.getRow(rownum);
		Cell cell=row.createCell(colnum);
		cell.setCellType(cell.CELL_TYPE_STRING);
		cell.setCellValue(data);

		try
		{
			FileOutputStream fos=new FileOutputStream(filepath);
			wb.write(fos);
			fos.close();
		}
		catch(Exception e)
		{
			e.getMessage();
		}

	}

	/**
	 * This methos is used for negative Scenario
	 */
	/****************This method is to set the File path and to open the Excel file, Pass Excel Path and Sheetname as Arguments to this method************************/
	public static void setExcelFile(String Path,String SheetName) throws Exception 
	{
		try 
		{
			/****************************Open the Excel file*************************************/
			FileInputStream ExcelFile = new FileInputStream(Path);

			/*************************Access the required test data sheet****************************/
			ExcelWBook = new XSSFWorkbook(ExcelFile);
			ExcelWSheet = ExcelWBook.getSheet(SheetName);
		} 
		catch (Exception e)
		{
			throw (e);
		}
	}

	public static Object[][] getTableArray(String FilePath, String SheetName, int iTestCaseRow) throws Exception
	{   
		String[][] tabArray = null;
		try
		{
			FileInputStream ExcelFile = new FileInputStream(FilePath);
			/************Access the required test data sheet******************/
			ExcelWBook = new XSSFWorkbook(ExcelFile);
			ExcelWSheet = ExcelWBook.getSheet(SheetName);
			int startCol = 1;
			int ci=0,cj=0;
			int totalRows = 1;
			int totalCols = 2;
			tabArray=new String[totalRows][totalCols];
			for (int j=startCol;j<=totalCols;j++, cj++)
			{
				tabArray[ci][cj]=getCellData(iTestCaseRow,j);
				System.out.println(tabArray[ci][cj]);
			}
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		return(tabArray);
	}
	/*****************************This method is to read the test data from the Excel cell, in this we are passing parameters as Row num and Col num8************************/

	public static String getCellData(int RowNum, int ColNum) throws Exception
	{
		try
		{

			Cell = ExcelWSheet.getRow(RowNum).getCell(ColNum);
			String CellData = Cell.getStringCellValue();
			return CellData;
		}
		catch (Exception e)
		{
			return"";
		}
	}

	public static String getTestCaseName(String sTestCase)throws Exception
	{
		String value = sTestCase;
		try
		{
			int posi = value.indexOf("@");
			value = value.substring(0, posi);
			posi = value.lastIndexOf(".");	
			value = value.substring(posi + 1);
			return value;
		}
		catch (Exception e)
		{
			throw (e);
		}
	}

	public static int getRowContains(String sTestCaseName, int colNum) throws Exception
	{
		int i;
		try 
		{
			int rowCount = ExcelDataDriver.getRowUsed();
			for ( i=0 ; i<rowCount; i++)
			{
				if (ExcelDataDriver.getCellData(i,colNum).equalsIgnoreCase(sTestCaseName))
				{
					break;
				}
			}
			return i;
		}
		catch (Exception e)
		{
			throw(e);
		}
	}

	public static int getRowUsed() throws Exception 
	{
		try
		{
			int RowCount = ExcelWSheet.getLastRowNum();
			return RowCount;
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
			throw (e);
		}
	}
	
	
	@SuppressWarnings({ "deprecation", "static-access" })
	public String[][] getCellData(String path, String sheetName) throws InvalidFormatException, IOException 
	{
		FileInputStream stream = new FileInputStream(path);
		Workbook workbook = WorkbookFactory.create(stream);
		Sheet s = workbook.getSheet(sheetName);
		int rowcount = s.getLastRowNum();
		int cellcount = s.getRow(0).getLastCellNum();
		String data[][] = new String[rowcount][cellcount];
		for (int i = 0; i <= rowcount; i++) 
		{
	
			Row r = s.getRow(i);
			for (int j = 0; j<=cellcount; j++) 
			{
				Cell c = r.getCell(j);
				try 
				{
					if (c.getCellType() == c.CELL_TYPE_STRING) 
					{
						data[i - 1][j] = c.getStringCellValue();
					} 
					else
					{
						data[i - 1][j] = String.valueOf(c.getNumericCellValue());
					
					}
				} 
				catch (Exception e) 
				{
					e.printStackTrace();
				}
			}
		}

		return data;
	}
	
	// get customer id and store in the excel sheet
	public void setCudtomerIDInExcel(String result) throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		FileInputStream fis=new FileInputStream(filepath);
		Workbook wb=WorkbookFactory.create(fis);
		Sheet sh=wb.getSheet("Customer ID");
		Object[][] customter_id = {{result}};
		int rowCount = sh.getLastRowNum();
		for (Object[] customerid : customter_id) 
		{
			Row row = sh.createRow(++rowCount);
			int columnCount = 0;
			Cell cell = row.createCell(columnCount);
			cell.setCellValue(rowCount);
			for (Object cellresult : customerid) 
			{
				cell = row.createCell(++columnCount);
				if (cellresult instanceof String) 
				{
					cell.setCellValue((String) cellresult);
				} 
				else if (cellresult instanceof Integer) 
				{
					cell.setCellValue((Integer) cellresult);
				}
			}
		}
		fis.close();
		try
		{
			FileOutputStream fos=new FileOutputStream(filepath);
			wb.write(fos);
			fos.close();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	
		public void updateExcelData(String result) throws EncryptedDocumentException, InvalidFormatException, IOException 
		{
		FileInputStream fis=new FileInputStream(filepath);
		Workbook wb=WorkbookFactory.create(fis);
		Sheet sh=wb.getSheet("Customer ID");
		Row row=sh.getRow(1);
		Cell cell=row.createCell(0);
		cell.setCellType(cell.CELL_TYPE_STRING);
		cell.setCellValue(result);
		FileOutputStream fos=new FileOutputStream(filepath);
		wb.write(fos);
		fos.close();
		}
		
		//FOR RTI
		
		public void updateExcelDataa(String result) throws EncryptedDocumentException, InvalidFormatException, IOException 
		{
		FileInputStream fis=new FileInputStream(filepath);
		Workbook wb=WorkbookFactory.create(fis);
		Sheet sh=wb.getSheet("RTIApplication Number");
		Row row=sh.getRow(1);
		Cell cell=row.createCell(0);
		cell.setCellType(cell.CELL_TYPE_STRING);
		cell.setCellValue(result);
		FileOutputStream fos=new FileOutputStream(filepath);
		wb.write(fos);
		fos.close();
		}


		//For Disconnection
		public void updateexcelData(String result) throws EncryptedDocumentException, InvalidFormatException, IOException 
		{
		FileInputStream fis=new FileInputStream(filepath);
		Workbook wb=WorkbookFactory.create(fis);
		Sheet sh=wb.getSheet("Disconnection");
		Row row=sh.getRow(1);
		Cell cell=row.createCell(0);
		cell.setCellType(cell.CELL_TYPE_STRING);
		cell.setCellValue(result);
		FileOutputStream fos=new FileOutputStream(filepath);
		wb.write(fos);
		fos.close();
		}


}
