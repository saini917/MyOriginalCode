package WaterAndSeweragePropertyTaxManagement;

import java.io.IOException;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.Reporter;
import GenericLibrary.ExcelDataDriver;
import GenericLibrary.CommonLibrary;

public class ToVerifyResetButton_SC_05_TC_13 extends CommonLibrary
{
	ExcelDataDriver excel=new ExcelDataDriver();
	WebDriverWait wait=new WebDriverWait(driver,10);

	/*
	 * This is the xpath of the WebElement "PROPERTY TAX MANAGEMENT dropdown".
	 * @author deepak.saini
	 * @since 2017-11-24
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//table/tbody/tr/td/div/h3/a[contains(text(),'PROPERTY TAX MANAGEMENT')]/preceding-sibling::span")
	private WebElement PropertyTaxdrop;

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "PROPERTY ASSESSMENT IMAGE".
	 * @author deepak.saini
	 * @since 2017-11-24
	 */
	/****************************************************************************************************/
	//@FindBy(xpath="//table/tbody/tr/td/div/h3/a[contains(text(),'PROPERTY TAX MANAGEMENT')]/../following-sibling::div/table/tbody/tr/td/span[contains(text(),'PROPERTY ASSESSMENT')]/../following-sibling::td/span/a/img[@src='/NRDAuthority1/javax.faces.resource/applyNow.png.xhtml?ln=img']")
	@FindBy(xpath="//table/tbody/tr/td/div/h3/a[contains(text(),'PROPERTY TAX MANAGEMENT')]/../following-sibling::div/table/tbody/tr/td/span[contains(text(),'PROPERTY ASSESSMENT')]/../following-sibling::td/span/a/img[@src='/NRDAuthority/javax.faces.resource/applyNow.png.xhtml?ln=img']")
	private WebElement propertyassessment;

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "PROCEED Button".
	 * @author deepak.saini
	 * @since 2017-11-24
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//button/span[contains(text(),'Proceed')]")
	private WebElement proceedbtn;

	/****************************************************************************************************/
	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "NEW APPLICATION Button".
	 * @author deepak.saini
	 * @since 2017-11-23
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//div[@id='form0:confirmDlg']/div/div/div/div/div/button/span[contains(text(),'New Application')]")
	private WebElement newApplication;

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "NEW ASSESSMENT RADIO Button".
	 * @author deepak.saini
	 * @since 2017-11-23
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//form[@id='form0']/div/table/tbody/tr/td/span/span/span/div/div/div/div/span/table/tbody/tr/td/label[contains(text(),'New Assessment')]/../input")
	private WebElement newAssessmentRadiobtn;

	/**
	 * @throws InterruptedException 
	 * @throws IOException 
	 * @throws InvalidFormatException 
	 * @throws EncryptedDocumentException **************************************************************************************************/
	public void verifyResetButon() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		wait.until(ExpectedConditions.elementToBeClickable(PropertyTaxdrop));
		HighlightOnElement(PropertyTaxdrop);
		Assert.assertTrue(PropertyTaxdrop.isDisplayed(),"PROPERTY TAX MANAGEMENT is displayed");
		Assert.assertTrue(PropertyTaxdrop.isEnabled(),"PROPERTY TAX MANAGEMENT is enabled");
		Actions propertytax=new Actions(driver);
		propertytax.click(PropertyTaxdrop).perform();
		Reporter.log("Action is performed on Property Tax Management dropdown",true);

		HighlightOnElement(propertyassessment);
		Assert.assertTrue(propertyassessment.isDisplayed(),"PROPERTY TAX MANAGEMENT IMAGE is displayed");
		Assert.assertTrue(propertyassessment.isEnabled(),"PROPERTY TAX MANAGEMENT IMAGE is enabled");
		propertyassessment.click();
		Reporter.log("Action is performed on Property Tax Management Image",true);

		wait.until(ExpectedConditions.elementToBeClickable(proceedbtn));
		HighlightOnElement(proceedbtn);
		Assert.assertTrue(proceedbtn.isDisplayed(),"PROCEED BUTTON is displayed");
		Assert.assertTrue(proceedbtn.isEnabled(),"PROCEED BUTTON is enabled");
		Reporter.log("Expected result:"+proceedbtn.getText(),true);
		Actions proceed=new Actions(driver);
		proceed.click(proceedbtn).perform();
		Reporter.log("Action is performed on Proceed button",true);

		try
		{
			//wait.until(ExpectedConditions.visibilityOf(newApplication));
			wait.until(ExpectedConditions.elementToBeClickable(newApplication));
			HighlightOnElement(newApplication);
			Assert.assertTrue(newApplication.isDisplayed(),"NEW APPLICATION BUTTON is displayed");
			Assert.assertTrue(newApplication.isEnabled(),"NEW APPLICATION BUTTON is enabled");
			Reporter.log("Expected result:"+newApplication.getText(),true);
			Actions newapplication=new Actions(driver);
			newapplication.click(newApplication).perform();
			Reporter.log("Action is performed on New Application button",true);
		}
		catch (StaleElementReferenceException st)
		{
			st.printStackTrace();
		}

		wait.until(ExpectedConditions.elementToBeClickable(newAssessmentRadiobtn));
		HighlightOnElement(newAssessmentRadiobtn);
		Assert.assertTrue(newAssessmentRadiobtn.isDisplayed(),"NEW ASSESSMENT RADIO BUTTON is displayed");
		Assert.assertTrue(newAssessmentRadiobtn.isEnabled(),"NEW ASSESSMENT RADIO BUTTON is enabled");
		newAssessmentRadiobtn.click();
		Reporter.log("Action is performed on New Assessment Radio button",true);
		verifyFinancialYear();
		verifyNameOfProperty();
		verifyMobileNumber();
		verifyEmail();
		verifyNameOfOwner();
		verifyNameOfSpouse();
		verifyJointHoldingOwnerType();
		verifyNameOfSecondOwner();
		verifyAddressOfSecondOwner();
		clickOnResetButton();
	}
	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "FINANCIAL YEAR dropdown".
	 * @author deepak.saini
	 * @since 2017-11-23
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//form[@id='form0']/div/table/tbody/tr/td/span/span/span/div/div/div/div/div/table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td/span/label[contains(text(),'Financial Year')]/../../../../../../following-sibling::td/table/tbody/tr/td/select")
	private WebElement financialyear;

	public void verifyFinancialYear() throws InterruptedException
	{
		wait.until(ExpectedConditions.elementToBeClickable(financialyear));
		HighlightOnElement(financialyear);
		Assert.assertTrue(financialyear.isDisplayed(),"FINANCIAL YEAR is displayed");
		Assert.assertTrue(financialyear.isEnabled(),"FINANCIAL YEAR is enabled");
		SelectVisibleText(financialyear,"2017-2018");
		Reporter.log("Action is performed on Financial Year dropdown",true);
	}

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "NAME OF PROPERTY".
	 * @author deepak.saini
	 * @since 2017-11-23
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//form[@id='form0']/div/table/tbody/tr/td/span/span/span/div/div/div/div/div/table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td/span/label[contains(text(),'Name Of Property')]/../../../../../../following-sibling::td/table/tbody/tr/td/input")
	private WebElement nameofproperty;

	public void verifyNameOfProperty() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		waitForSomeTime();
		HighlightOnElement(nameofproperty);
		Assert.assertTrue(nameofproperty.isDisplayed(),"NAME OF PROPERTY FILED is displayed");
		Assert.assertTrue(nameofproperty.isEnabled(),"NAME OF PROPERTY FILED is enabled");
		String value1=excel.getExcelData(nameofproperty,"Owner_Property_Details",1,2);
		Reporter.log("Expected result:"+value1,true);
		Reporter.log("Action is performed on Name of Property field",true);
	}

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "MOBILE NUMBER dropdown".
	 * @author deepak.saini
	 * @since 2017-11-23
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//form[@id='form0']/div/table/tbody/tr/td/span/span/span/div/div/div/div/div/table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td/span/label[contains(text(),'Mobile No.')]/../../../../../../following-sibling::td/table/tbody/tr/td/input")
	private WebElement mobileno;

	public void verifyMobileNumber() throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		HighlightOnElement(mobileno);
		Assert.assertTrue(mobileno.isDisplayed(),"MOBILE NUMBER FILED is displayed");
		Assert.assertTrue(mobileno.isEnabled(),"MOBILE NUMBER FILED is enabled");
		String value1=excel.getExcelData(mobileno,"Owner_Property_Details",1,3);
		Reporter.log("Expected result:"+value1,true);
		Reporter.log("Action is performed on Mobile Number field",true);
	}

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "EMAIL".
	 * @author deepak.saini
	 * @since 2017-11-23
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//form[@id='form0']/div/table/tbody/tr/td/span/span/span/div/div/div/div/div/table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td/span/label[contains(text(),'Email')]/../../../../../../following-sibling::td/table/tbody/tr/td/input")
	private WebElement email;

	public void verifyEmail() throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		HighlightOnElement(email);
		Assert.assertTrue(email.isDisplayed(),"EMAIL FILED is displayed");
		Assert.assertTrue(email.isEnabled(),"EMAIL FILED is enabled");
		String value1=excel.getExcelData(email,"Owner_Property_Details",1,4);
		Reporter.log("Expected result:"+value1,true);
		Reporter.log("Action is performed on email field",true);
	}

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "NAME OF OWNER".
	 * @author deepak.saini
	 * @since 2017-11-23
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//form[@id='form0']/div/table/tbody/tr/td/span/span/span/div/div/div/div/div/table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td/span/label[contains(text(),'Name Of Owner')]/../../../../../../following-sibling::td/table/tbody/tr/td/input")
	private WebElement nameofowner;

	public void verifyNameOfOwner() throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		HighlightOnElement(nameofowner);
		Assert.assertTrue(nameofowner.isDisplayed(),"NAME OF OWNER FILED is displayed");
		Assert.assertTrue(nameofowner.isEnabled(),"NAME OF OWNER FILED is enabled");
		String value1=excel.getExcelData(nameofowner,"Owner_Property_Details",1,5);
		Reporter.log("Expected result:"+value1,true);
		Reporter.log("Action is performed on Name Of Owner field",true);
	}

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "NAME OF SPOUSE".
	 * @author deepak.saini
	 * @since 2017-11-23
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//form[@id='form0']/div/table/tbody/tr/td/span/span/span/div/div/div/div/div/table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td/span/label[contains(text(),'Name of Spouse')]/../../../../../../following-sibling::td/table/tbody/tr/td/input")
	private WebElement nameofspouse;

	public void verifyNameOfSpouse() throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		HighlightOnElement(nameofspouse);
		Assert.assertTrue(nameofspouse.isDisplayed(),"NAME OF SPOUSE FILED is displayed");
		Assert.assertTrue(nameofspouse.isEnabled(),"NAME OF SPOUSE FILED is enabled");
		String value1=excel.getExcelData(nameofspouse,"Owner_Property_Details",1,6);
		Reporter.log("Expected result:"+value1,true);
		Reporter.log("Action is performed on Name Of Spouse field",true);
	}

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "OWNER TYPE".
	 * @author deepak.saini
	 * @since 2017-11-23
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//form[@id='form0']/div/table/tbody/tr/td/span/span/span/div/div/div/div/div/table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td/span/label[contains(text(),'Owner Type')]/../../../../../../following-sibling::td/table/tbody/tr/td/select")
	private WebElement ownertype;

	public void verifyJointHoldingOwnerType() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		HighlightOnElement(ownertype);
		Assert.assertTrue(ownertype.isDisplayed(),"OWNER TYPE FILED is displayed");
		Assert.assertTrue(ownertype.isEnabled(),"OWNER TYPE FILED is enabled");
		SelectVisibleText(ownertype,"Joint Holding");
		Reporter.log("Action is performed on Owner Type Joint Holding field",true);
		waitForSomeTime();
	}

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "NAME OF SECOND OWNER".
	 * @author deepak.saini
	 * @since 2017-11-23
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//form[@id='form0']/div/table/tbody/tr/td/span/span/span/div/div/div/div/div/table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td/span/label[contains(text(),'Name Of Second Owner/Occupier')]/../../../../../../following-sibling::td/table/tbody/tr/td/input")
	private WebElement nameofsecondowner;

	public void verifyNameOfSecondOwner() throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		HighlightOnElement(nameofsecondowner);
		Assert.assertTrue(nameofsecondowner.isDisplayed(),"NAME OF SECOND OWNER FILED is displayed");
		Assert.assertTrue(nameofsecondowner.isEnabled(),"NAME OF SECOND OWNER FILED is enabled");
		String value1=excel.getExcelData(nameofsecondowner,"Owner_Property_Details",1,7);
		Reporter.log("Expected result:"+value1,true);
		Reporter.log("Action is performed on Name Of Second Owner field",true);
	}

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "ADDRESS OF SECOND OWNER".
	 * @author deepak.saini
	 * @since 2017-11-23
	 */
	/****************************************************************************************************/
	@FindBy(xpath="//form[@id='form0']/div/table/tbody/tr/td/span/span/span/div/div/div/div/div/table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td/span/label[contains(text(),'Address of Second Owner/Occupier')]/../../../../../../following-sibling::td/table/tbody/tr/td/textarea")
	private WebElement addressofsecondowner;

	public void verifyAddressOfSecondOwner() throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		HighlightOnElement(addressofsecondowner);
		Assert.assertTrue(addressofsecondowner.isDisplayed(),"ADDRESS OF SECOND OWNER FILED is displayed");
		Assert.assertTrue(addressofsecondowner.isEnabled(),"ADDRESS OF SECOND OWNER FILED is enabled");
		String value1=excel.getExcelData(addressofsecondowner,"Owner_Property_Details",1,8);
		Reporter.log("Expected result:"+value1,true);
		Reporter.log("Action is performed on Address Of Second Owner field",true);
	}

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "Reset button".
	 * @author deepak.saini
	 * @since 2017-11-23
	 */
	/****************************************************************************************************/
	@FindBy(xpath="(//button/span[contains(text(),'Reset')])[1]")
	private WebElement resetbtn;

	public void clickOnResetButton()
	{
		wait.until(ExpectedConditions.elementToBeClickable(resetbtn));
		HighlightOnElement(resetbtn);
		Assert.assertTrue(resetbtn.isDisplayed(),"NEXT button is displayed");
		Assert.assertTrue(resetbtn.isEnabled(),"NEXT button is enabled");
		Reporter.log("Expected result:"+resetbtn.getText(),true);
		resetbtn.click();
		Reporter.log("Action is performed on Reset button",true);
	}
}
