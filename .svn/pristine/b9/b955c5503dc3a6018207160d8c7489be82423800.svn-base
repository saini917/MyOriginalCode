package WaterAndSewerageDisconnection;

import java.awt.AWTException;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.apache.log4j.Logger;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Wait;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.Reporter;

import GenericLibrary.CommonLibrary;
import GenericLibrary.ExcelDataDriver;

/**
 * @author Sarvesh.Nellore
 * @Date: 27-09-2017
 *@Purpose: To Verify Disconnection Login As JE
 */
public class WaterAndSewerageDisconnectionLoginAsJE  extends CommonLibrary
{

	ExcelDataDriver excel=new ExcelDataDriver();
	Logger log=Logger.getLogger("devpinoyLogger");
	int m1=1;
	private static WebElement element = null;
	static int pendcountList=0;

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "Pending Application".
	 * @author Sarvesh.Nellore
	 * @since 2017-09-21
	 */
	/*****************************************************************************************************/
	@FindBy(xpath="//div[@class='col-lg-12 col-md-12 padmar0']/ul/li[contains(.,'Pending Application')]")
	private WebElement PendingApplication;

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "New Application Label" .
	 * @author Sarvesh.Nellore
	 * @since 2017-09-21
	 */
	/*****************************************************************************************************/
	@FindBy(xpath="//td[@class='rightColWithLeftPad']/table/tbody/tr/td/form/div/div[2]/div[2]/h3/a")
	private WebElement newapplication;

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "Under New Application menu".
	 * @author Sarvesh.Nellore
	 * @since 2017-09-21
	 */
	/*****************************************************************************************************/
	@FindBy(xpath="//td[@class='rightColWithLeftPad']/table/tbody/tr/td/form/div/div[2]/div[2]/div/div/h3/a")
	private List<WebElement> underNewApplicationpending;

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "Pending Installation".
	 * @author Sarvesh.Nellore
	 * @since 2017-09-21
	 */
	/*****************************************************************************************************/
	@FindBy(xpath="//td[@class='rightColWithLeftPad']/table/tbody/tr/td/form/div/div[2]/div[3]/h3/a")
	private WebElement pendinginstallation;

	@FindBy(xpath="//td[@class='rightColWithLeftPad']/table/tbody/tr/td/form/div/div[2]/div[3]/div/div/h3/a")
	private List<WebElement> underpendinginstallation;

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "RTI name".
	 * @author Sarvesh.Nellore
	 * @since 2017-09-21
	 */
	/*****************************************************************************************************/
	@FindBy(xpath="//td[@class='rightColWithLeftPad']/table/tbody/tr/td/form/div/div[2]/div[4]/h3/a")
	private WebElement rtiquestion;

	@FindBy(xpath="//td[@class='rightColWithLeftPad']/table/tbody/tr/td/form/div/div[2]/div[5]/h3/a")
	private WebElement MeetingManageMent;

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "Check Action button is displayed".
	 * @author Sarvesh.Nellore
	 * @since 2017-09-21
	 */
	/*****************************************************************************************************/
	@FindBy(xpath="//img[@src='/NRDAuthority/resources/images/view-new.png']")
	private  List<WebElement> actionbtn;

	public void toVerifyPendingApplicationAsJE() throws InterruptedException
	{
		HighlightOnElement(PendingApplication);
		Assert.assertTrue(PendingApplication.isEnabled());
		PendingApplication.click();
		Reporter.log("Expected result:click on Pending Application",true);
		element = (new WebDriverWait(driver, 30)).until(ExpectedConditions
				.visibilityOfElementLocated(By
						.xpath("//span[contains(.,'Applications List')]/../following-sibling::div/div[1]/div/table/tbody/tr[2]/td/input")));


		HighlightOnElement(newapplication);
		String newapplicationlabelname=newapplication.getText();
		Reporter.log("Expected result:"+newapplicationlabelname,true);

		for(WebElement menulistnewapplication:underNewApplicationpending)
		{

			if(menulistnewapplication.isDisplayed())
			{
				HighlightOnElement(menulistnewapplication);
				String pendingapplication=menulistnewapplication.getText();
				Reporter.log("Menu list under New Application:"+pendingapplication,true);
			}
		}
		HighlightOnElement(pendinginstallation);
		for(WebElement menulistPendingInstallation:underpendinginstallation)
		{

			if(menulistPendingInstallation.isDisplayed())
			{
				HighlightOnElement(menulistPendingInstallation);
				String pendingapplication=menulistPendingInstallation.getText();
				Reporter.log("Menu list under New Application:"+pendingapplication,true);
			}
		}



	}

	public void toVerifyActionButtonDisplayed01()
	{
		//int actionbuttoncount=0;
		for(WebElement action:actionbtn)
		{
			if(action.isDisplayed())
				Assert.assertTrue(action.isDisplayed(),"Test Case: Pass");
			{
				HighlightOnElement(action);
				/*JavascriptExecutor jse = (JavascriptExecutor)driver;
						jse.executeScript("window.scrollBy(0,250)", "");*/

			}
			//Reporter.log("Test case is passed for action button shown:"+actionbuttoncount,true);
		}
	}

	public void toVerifyPendingApplicationAsJE1() throws InterruptedException
	{
		HighlightOnElement(PendingApplication);
		Assert.assertTrue(PendingApplication.isEnabled());
		Reporter.log("Expected result:click on Pending Application",true);
		HighlightOnElement(newapplication);
		String newapplicationlabelname=newapplication.getText();
		Reporter.log("Expected result:"+newapplicationlabelname,true);

		for(WebElement menulistnewapplication:underNewApplicationpending)
		{

			if(menulistnewapplication.isDisplayed())
			{
				HighlightOnElement(menulistnewapplication);
				String pendingapplication=menulistnewapplication.getText();
				Reporter.log("Menu list under New Application:"+pendingapplication,true);
			}
		}
		HighlightOnElement(pendinginstallation);
		for(WebElement menulistPendingInstallation:underpendinginstallation)
		{

			if(menulistPendingInstallation.isDisplayed())
			{
				HighlightOnElement(menulistPendingInstallation);
				String pendingapplication=menulistPendingInstallation.getText();
				Reporter.log("Menu list under New Application:"+pendingapplication,true);
			}
		}

		HighlightOnElement(rtiquestion);
		HighlightOnElement(MeetingManageMent);

	}	


	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "Enter Value in the search box".
	 * @author Sarvesh.Nellore
	 * @since 2017-09-21
	 */
	/*****************************************************************************************************/
	//@FindBy(xpath="//table[@class='ui-panelgrid ui-widget']/tbody/tr/td[2]/input")
	@FindBy(xpath="//span[contains(.,'Applications List')]/../following-sibling::div/div[1]/div/table/tbody/tr[2]/td/input")
	private WebElement entervalueinsearchbox;

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "click on Search button".
	 * @author Sarvesh.Nellore
	 * @since 2017-09-21
	 */
	/*****************************************************************************************************/
	@FindBy(xpath="//button/span[contains(text(),'Search')]")
	private WebElement searchbtn;

	@FindBy(xpath="//button/span[contains(text(),'Reset')]")
	private WebElement Resetbtn;

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "Pending Status".
	 * @author Sarvesh.Nellore
	 * @since 2017-09-21
	 */
	/*****************************************************************************************************/
	@FindBy(xpath="//div[@class='ui-accordion-content ui-helper-reset ui-widget-content']/div/div/table/tbody/tr/td[contains(.,'PENDING')]")
	private WebElement PendingStatus;

	public void toVerifyPendingApplication01() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		HighlightOnElement(entervalueinsearchbox);

		excel.getExcelData(entervalueinsearchbox, "DisconnectionNumber", 0, 1);
		HighlightOnElement(searchbtn);
		Assert.assertTrue(searchbtn.isDisplayed());
		searchbtn.click();
		waitForSomeTime();
		waitForSomeTime();

		HighlightOnElement(PendingStatus);
		Assert.assertTrue(PendingStatus.isDisplayed(),"TestCase Pass");

	}

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "Pending Application Link".
	 * @author birbal.tahim
	 * @since 2017-09-06
	 */
	/*****************************************************************************************************/
	@FindBy(xpath="//div[@class='dash-wraper water']/div[2]/div[1]/ul[2]/li[3]")
	private WebElement Pending_count;

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "PendingListonPopup".
	 * @author birbal.tahim
	 * @since 2017-09-06
	 */
	/*****************************************************************************************************/
	//@FindBy(xpath="//div[@id='inboxForm:dlg']/div[2]/div/div/div/div[1]/table/tbody/tr/td[5]/span")
	@FindBy(xpath="//div[@id='inboxForm:dlg']/div[2]/div/div/div/div[1]/table/tbody/tr")
	private List <WebElement> PendingListonPopup;

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "Close Popup Window".
	 * @author birbal.tahim
	 * @since 2017-09-06
	 */
	/*****************************************************************************************************/
	@FindBy(xpath=".//*[@id='inboxForm:dlg']/div[1]/a/span")
	private WebElement Close_Popwindow;

	public void toclickonpendingcountlink() throws InterruptedException
	{

		HighlightOnElement(Pending_count);
		Assert.assertEquals(true,Pending_count.isEnabled());
		String PendingCount1=Pending_count.getText();
		int pendingcount=Integer.parseInt(PendingCount1);
		waitForSomeTime();
		System.out.println("Pending Count On Water Icon Is:" +pendingcount);
		Pending_count.click();
		waitForSomeTime();
		Thread.sleep(20000);
		closePopUpWindow();
		Pending_count.click();
		waitForSomeTime();
		Thread.sleep(20000);

	}

	public void toverifyPendingCountinWatermenu02() throws InterruptedException
	{

		waitForSomeTime();
		HighlightOnElement(Pending_count);
		Assert.assertEquals(true,Pending_count.isEnabled());
		String PendingCount1=Pending_count.getText();
		int pendingcount=Integer.parseInt(PendingCount1);
		waitForSomeTime();
		System.out.println("Pending Count On Water Icon Is:" +pendingcount);
		Pending_count.click();
		Thread.sleep(20000);
		waitForSomeTime();
		Reporter.log(" To Verify Pending_count  in Water_Icon  Water&Sewerage link is Present",true); //print for eclipse console
		List<WebElement> allpages = driver.findElements(By.xpath("//span[contains(.,'WATER AND SEWERAGE CONNECTION Pending List')]/../following-sibling::div/div/div/div/div[2]/span[3]/span"));
		System.out.println("Total No Of Pages:" +allpages.size());
		for(int i=1;i<=((pendingcount/10)+1);i++)
		{
			pendcountList=pendcountList + PendingListonPopup.size();

			if(Seeknext_PendingList.isEnabled())
			{

				Seeknext_PendingList.click();
				waitForSomeTime();

			}

		}
		Reporter.log("Approve Count On Popup List  Is:" +pendcountList,true);
		//System.out.println("Pending Count On Popup List  Is:" +pendcountList);
	}

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "Pagination on PendingList_SeekFirst".
	 * @author birbal.tahim
	 * @since 2017-09-06
	 */
	/*****************************************************************************************************/
	@FindBy(xpath="//span[@class='ui-icon ui-icon-seek-next']")
	private WebElement Seeknext_PendingList;

	public void closePopUpWindow() throws InterruptedException{
		waitForSomeTime();
		HighlightOnElement(Close_Popwindow);
		waitForSomeTime();
		Assert.assertEquals(true,Close_Popwindow.isEnabled());
		Close_Popwindow.click();
		Reporter.log("Expected result:click on Close Popup window",true);
		waitForSomeTime();
		waitForSomeTime();


	}
	public void toVerifyRecordPerPage02() throws InterruptedException
	{

		waitForSomeTime();
		int count=PendingListonPopup.size();
		if(count==10)
		{
			Assert.assertEquals(count,10);
			Reporter.log("Test case pass: Number of record per page is equal to 10",true);
		}
		else
		{
			Reporter.log("Test case fail: Number of record per page is greater or less than 10",true);
			Assert.assertNotEquals(count,10);
		}
		Reporter.log("No of record per page:"+count,true);
		waitForSomeTime();

		waitForSomeTime();
	}

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "Pagination on PendingList_SeekFirst".
	 * @author birbal.tahim
	 * @since 2017-09-06
	 */
	/*****************************************************************************************************/
	@FindBy(xpath="//span[@class='ui-icon ui-icon-seek-first']")
	private WebElement SeekFirst_PendingList;

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "Pagination on PendingList_SeekFirst".
	 * @author birbal.tahim
	 * @since 2017-09-06
	 */
	/*****************************************************************************************************/
	@FindBy(xpath="//span[@class='ui-icon ui-icon-seek-prev']")
	private WebElement SeekPrevious_PendingList;



	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "Pagination on PendingList_SeekFirst".
	 * @author birbal.tahim
	 * @since 2017-09-06
	 */
	/*****************************************************************************************************/
	@FindBy(xpath="//span[@class='ui-icon ui-icon-seek-end']")
	private WebElement Seekend_PendingList;

	public void toVerifyPagination02() throws InterruptedException
	{
		waitForSomeTime();
		HighlightOnElement(SeekFirst_PendingList);
		HighlightOnElement(SeekPrevious_PendingList);
		HighlightOnElement(Seeknext_PendingList);
		HighlightOnElement(Seekend_PendingList);

		if(Seeknext_PendingList.isEnabled())
		{
			Assert.assertTrue(Seeknext_PendingList.isDisplayed(),"TestCase Pass");
			Reporter.log("Test case pass: Pagination is Displayed in PendingList Application",true);
			//Seeknext_PendingList.click();
			waitForSomeTime();
		}
		else 
		{
			Assert.assertFalse(Seeknext_PendingList.isDisplayed(),"Test Case Fail");
			Reporter.log("Test case pass: Pagination is Not Displayed in PendingList Application",true);
		}

	}	


	@FindBy(xpath="(//span[@class='ui-icon ui-icon-seek-next'])[1]")
	private WebElement Seeknext_PendingApplication;

	@FindBy(xpath="(//span[@class='ui-icon ui-icon-seek-first'])[1]")
	private WebElement SeekFirst_PendingApplication;


	@FindBy(xpath="(//span[@class='ui-icon ui-icon-seek-prev'])[1]")
	private WebElement SeekPrevious_PendingApplication;

	@FindBy(xpath="(//span[@class='ui-icon ui-icon-seek-end'])[1]")
	private WebElement Seekend_PendingApplication;

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "Pagination on PendingList_SeekFirst".
	 * @author birbal.tahim
	 * @since 2017-09-06
	 */
	/*****************************************************************************************************/
	@FindBy(xpath="//a[contains(.,'DISCONNECTION OF WATER CONNECTION')]")
	private WebElement DisconnectionofWaterConnection;



	public void toverifypeginationofPendingApplication03() throws InterruptedException
	{
		HighlightOnElement(PendingApplication);
		Assert.assertTrue(PendingApplication.isEnabled(),"Test Case PAss");
		PendingApplication.click();
		waitForSomeTime();
		fluentWait(DisconnectionofWaterConnection);
		Reporter.log("Expected result:click on PendingApplication Link",true);
		HighlightOnElement(DisconnectionofWaterConnection);
		waitForSomeTime();
		HighlightOnElement(SeekFirst_PendingApplication);
		Assert.assertEquals(SeekFirst_PendingApplication.isDisplayed(),true);
		HighlightOnElement(SeekPrevious_PendingApplication);
		Assert.assertEquals(SeekPrevious_PendingApplication.isDisplayed(),true);
		HighlightOnElement(Seeknext_PendingApplication);
		Assert.assertEquals(Seeknext_PendingApplication.isDisplayed(),true);
		HighlightOnElement(Seekend_PendingApplication);
		Assert.assertEquals(Seekend_PendingApplication.isDisplayed(),true);

		if(Seeknext_PendingList.isEnabled())
		{
			Assert.assertTrue(Seeknext_PendingList.isEnabled());
			Reporter.log("Test case pass: Pagination is Displayed in  Application",true);
			Seeknext_PendingList.click();
			waitForSomeTime();
		}
		else 
		{
			Assert.assertFalse(Seeknext_PendingList.isEnabled());
			Reporter.log("Test case pass: Pagination is Not Displayed in  Application",true);
		}

	}

	@FindBy(xpath=".//*[@id='inboxForm:growl_container']/div/div/div[2]/span")
	private WebElement getmessage;

	public void toclickonPendingApplication() throws InterruptedException
	{
		HighlightOnElement(PendingApplication);
		Assert.assertTrue(PendingApplication.isEnabled(),"Test Case PAss");
		PendingApplication.click();
		waitForelementPresent(entervalueinsearchbox);
		Reporter.log("Expected result:click on PendingApplication Link",true);


	}



	public void toVerifyInvalidApplicationNumber04() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		HighlightOnElement(PendingApplication);
		Assert.assertTrue(PendingApplication.isEnabled(),"Test Case PAss");
		PendingApplication.click();
		waitForSomeTime();
		fluentWait(entervalueinsearchbox);
		Reporter.log("Expected result:click on PendingApplication Link",true);

		waitForSomeTime();
		HighlightOnElement(entervalueinsearchbox);
		String invalidnumber=excel.getExcelData(entervalueinsearchbox, "Customer ID",1, 5);
		Reporter.log("Invalid Application Number:"+invalidnumber,true);
		waitForSomeTime();
		HighlightOnElement(searchbtn);
		searchbtn.click();
		waitForSomeTime();
		waitForSomeTime();
		acceptAlert();
		waitForSomeTime();
		/*HighlightOnElement(getmessage);
			String Expected=getmessage.getText();
			String Actual="Record not found";
			Assert.assertEquals(Actual, Expected);
			Reporter.log("Expected result:"+Expected,true);
			waitForSomeTime();
			waitForSomeTime();*/

	}

	public void toVerifyInvalidApplicationNumber05() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		HighlightOnElement(PendingApplication);
		Assert.assertTrue(PendingApplication.isEnabled(),"Test Case PAss");
		PendingApplication.click();
		//waitForSomeTime();
		fluentWait(entervalueinsearchbox);
		Reporter.log("Expected result:click on PendingApplication Link",true);

		waitForSomeTime();
		HighlightOnElement(entervalueinsearchbox);
		String invalidnumber=excel.getExcelData(entervalueinsearchbox, "DisconnectionNumber",0, 2);
		Reporter.log("Invalid Application Number:"+invalidnumber,true);
		waitForSomeTime();
		HighlightOnElement(searchbtn);
		searchbtn.click();
		waitForSomeTime();
		HighlightOnElement(getmessage);
		String Expected=getmessage.getText();
		String Actual="Application Number is not in Records";
		Assert.assertEquals(Actual, Expected);
		Reporter.log("Expected result:"+Expected,true);
		waitForSomeTime();
		waitForSomeTime();

	}


	public void toVerifyresetButtonFunctionality() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		HighlightOnElement(PendingApplication);
		Assert.assertTrue(PendingApplication.isEnabled(),"Test Case PAss");
		PendingApplication.click();
		//waitForSomeTime();
		fluentWait(entervalueinsearchbox);
		Reporter.log("Expected result:click on PendingApplication Link",true);

		waitForSomeTime();
		HighlightOnElement(entervalueinsearchbox);
		String invalidnumber=excel.getExcelData(entervalueinsearchbox, "DisconnectionNumber",0, 2);
		Reporter.log("Invalid Application Number:"+invalidnumber,true);
		waitForSomeTime();
		HighlightOnElement(Resetbtn);
		Resetbtn.click();
		/*
			WebDriverWait wait = new WebDriverWait(driver, 120);
			WebElement element = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button/span[contains(text(),'Search')]")));
		 */waitForSomeTime();
		 waitForSomeTime();

	}


	public void toVerifyBlankApplicationNumber05() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		HighlightOnElement(PendingApplication);
		Assert.assertTrue(PendingApplication.isEnabled(),"Test Case PAss");
		PendingApplication.click();
		fluentWait(entervalueinsearchbox);			
		waitForSomeTime();
		Reporter.log("Expected result:click on PendingApplication Link",true);
		HighlightOnElement(entervalueinsearchbox);
		HighlightOnElement(searchbtn);
		searchbtn.click();
		waitForSomeTime();
		HighlightOnElement(getmessage);
		String Expected=getmessage.getText();
		String Actual="Please enter Application Number !";
		Assert.assertEquals(Actual, Expected);
		Reporter.log("Expected result:"+Expected,true);
		waitForSomeTime();
		waitForSomeTime();
	}

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "Application Grid".
	 * @author Sarvesh.Nellore
	 * @since 2017-09-21
	 */
	/*****************************************************************************************************/
	@FindBy(xpath="(//table[@role='grid']/thead/tr)[1]")
	private WebElement Application_Grid;


	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "Application Status".
	 * @author Sarvesh.Nellore
	 * @since 2017-09-21
	 */
	/*****************************************************************************************************/
	@FindBy(xpath="//span[contains(.,'PENDING')]")
	private WebElement Application_Status;

	@FindBy(xpath="//h3/a[contains(.,'DISCONNECTION OF WATER CONNECTION')]/../../div/div/div[1]/table/thead/tr/th")
	private List<WebElement> ApplicationDetails;

	public void toVerifyValidApplicationNumber06()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		HighlightOnElement(PendingApplication);
		Assert.assertTrue(PendingApplication.isEnabled(),"Test Case PAss");
		PendingApplication.click();
		fluentWait(entervalueinsearchbox);
		waitForSomeTime();
		Reporter.log("Expected result:click on PendingApplication Link",true);
		HighlightOnElement(entervalueinsearchbox);
		HighlightOnElement(searchbtn);
		String validnumber=excel.getExcelData(entervalueinsearchbox, "DisconnectionNumber",0, 1);
		Reporter.log("Valid Application Number:"+validnumber,true);
		waitForSomeTime();
		HighlightOnElement(searchbtn);
		searchbtn.click();
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(Application_Grid);
		waitForSomeTime();

		for(WebElement Disconnectionapplication:ApplicationDetails)
		{

			if(Disconnectionapplication.isDisplayed())
			{
				HighlightOnElement(Disconnectionapplication);
				String pendingapplication=Disconnectionapplication.getText();
				Reporter.log("Menu list under  Application:"+pendingapplication,true);
			}
		}


		HighlightOnElement(Application_Status);
		String ActualStatus=Application_Status.getText();
		String ExpectedStatus="PENDING";
		if(ActualStatus.equalsIgnoreCase(ExpectedStatus))
		{
			Reporter.log("Application Status Is Pending",true);
		}
		else
		{
			Reporter.log("Application Status Is Not Pending",true);	
		}

	}

	//@FindBy(xpath="(//img[@src='/NRDAuthority1/resources/images/view-new.png'])[1]")
	@FindBy(xpath="//h3[contains(.,'DISCONNECTION OF WATER CONNECTION')]/../../div/div/div/div[1]/table/tbody/tr/td//img[@src='/NRDAuthority/resources/images/view-new.png']")
	private WebElement action;


	@FindBy(xpath="//div[@id='inboxForm:Nb']/div/div[3]/div[2]/center/table/tbody/tr/td[1]/label")
	private List<WebElement> commentlabel;

	@FindBy(xpath="//div[@id='inboxForm:Nb']/div/div[3]/div[2]/center/table/tbody/tr/td[2]/textarea")
	private WebElement entercommentbox;

	@FindBy(xpath="//div[@id='inboxForm:Nb']/div/div[3]/div[2]/center/table/tbody/tr/td[4]/a/span")
	private WebElement viewpropertymap;

	@FindBy(xpath="//div[@id='inboxForm:Nb']/div/div[3]/div[2]/center/table[2]/tbody/tr/td/span")
	private WebElement uploaddocumentlabel;

	@FindBy(xpath="//div[@id='inboxForm:Nb']/div/div[3]/div[2]/center/table[2]/tbody/tr/td/table/tbody/tr/td/div/div[1]/label")
	private WebElement uploaddocument;

	@FindBy(xpath="//div[@id='inboxForm:Nb']/div/div[3]/div[2]/center/table[1]/tbody/tr/td[2]/div/div[3]/span")
	private WebElement clickonselectactiondrop;

	@FindBy(xpath="//ul[@class='ui-selectonemenu-items ui-selectonemenu-list ui-widget-content ui-widget ui-corner-all ui-helper-reset']/li")
	private List<WebElement> selectdropdownvalue;

	public void toVerifyActionbuttonFunctionalityinPendingApplication07() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException
	{
		HighlightOnElement(entervalueinsearchbox);
		HighlightOnElement(searchbtn);
		String validnumber=excel.getExcelData(entervalueinsearchbox, "DisconnectionNumber",0, 1);
		Reporter.log("Valid Application Number:"+validnumber,true);
		waitForSomeTime();
		HighlightOnElement(searchbtn);
		searchbtn.click();
		waitForSomeTime();
		HighlightOnElement(action);
		action.click();
		waitForSomeTime();
		waitForSomeTime();
		ScroolDown();
		for(WebElement la:commentlabel)
		{
			if(la.isDisplayed())
			{
				HighlightOnElement(la);
				String labelname=la.getText();
				Reporter.log("Expected result:"+labelname,true);

			}
		}
		//Assert.assertEquals(uploaddocumentlabel.isDisplayed(),"Test case pass");
		HighlightOnElement(uploaddocumentlabel);
		String uploadlabel=uploaddocumentlabel.getText();
		Reporter.log("Expected result:"+uploadlabel,true);
		waitForSomeTime();


		HighlightOnElement(clickonselectactiondrop);
		clickonselectactiondrop.click();


		for(WebElement menulistDropdown:selectdropdownvalue)
		{

			if(menulistDropdown.isDisplayed())
			{
				HighlightOnElement(menulistDropdown);
				String DropdownMenu=menulistDropdown.getText();
				Reporter.log("Menu list Action DROPDOWN :"+DropdownMenu,true);
			}
		}

		ScroolUp();
		/*
			for(int i=1;i<selectdropdownvalue.size();i++)
			{
				String value=selectdropdownvalue.get(i).getText();
				Reporter.log("Expected result:"+value,true);
				waitForSomeTime();
			}
		 */
	}

	@FindBy(xpath=".//*[@id='inboxForm:msg_container']/div/div/div[2]/span")
	private WebElement ErrorMessag_Popup;

	@FindBy(xpath="//button[contains(.,'Submit') and@role='button']")
	private WebElement Submit_Button;

	public void toVerifySubmitbuttonFunctionalityWithActionFieldISBlank08() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException
	{

		waitForSomeTime();
		HighlightOnElement(Submit_Button);
		Assert.assertEquals(Submit_Button.isEnabled(),true);
		ScroolDown();
		waitForSomeTime();
		Submit_Button.click();
		Reporter.log("Click on Submit button Successfully",true);


	}

	public void toVerifyErrorMessage() throws InterruptedException
	{
		waitForSomeTime();
		HighlightOnElement(ErrorMessag_Popup);
		String Expected_Message="Action required !";
		String Actual_Message=ErrorMessag_Popup.getText();
		Assert.assertEquals(Expected_Message, Actual_Message);
		waitForSomeTime();
		waitForSomeTime();

	}

	public void toVerifyErrorMessageAsUserisBlank() throws InterruptedException
	{
		waitForSomeTime();
		HighlightOnElement(ErrorMessag_Popup);
		String Expected_Message="Please select any User to forward the Application !!";
		String Actual_Message=ErrorMessag_Popup.getText();
		Assert.assertEquals(Expected_Message, Actual_Message);
		waitForSomeTime();
		waitForSomeTime();

	}


	public void toVerifyErrorMessageAsCommentFieldisBlank() throws InterruptedException
	{
		waitForSomeTime();
		HighlightOnElement(ErrorMessag_Popup);
		String Expected_Message="Please enter comments !";
		String Actual_Message=ErrorMessag_Popup.getText();
		Assert.assertEquals(Expected_Message, Actual_Message);
		waitForSomeTime();
		waitForSomeTime();

	}

	public void toVerifyErrorMessageAsUploadingDocumentAsInvalidFormat() throws InterruptedException
	{
		waitForSomeTime();
		HighlightOnElement(ErrorMessag_Popup);
		String Expected=ErrorMessag_Popup.getText();
		String Actual="Upload only jpg, png or pdf file";
		Assert.assertEquals(Expected,Actual,"Test case pass");
		Reporter.log("Expected result:"+Expected,true);
		waitForSomeTime();
		waitForSomeTime();

	}

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "select value".
	 * @author Sarvesh.Nellore
	 * @since 2017-09-22
	 */
	/*****************************************************************************************************/
	//@FindBy(xpath="//html/body/div[11]/div/ul/li")
	@FindBy(xpath="//ul[@class='ui-selectonemenu-items ui-selectonemenu-list ui-widget-content ui-widget ui-corner-all ui-helper-reset']/li")
	private List<WebElement> selectdropdownvalueUser;

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "select user value".
	 * @author Sarvesh.Nellore
	 * @since 2017-09-22
	 */
	/*****************************************************************************************************/
	@FindBy(xpath="//table/tbody/tr/td[3]/span/div/div[3]/span")
	private WebElement clickonselectuserdrop;


	public void toVerifySubmitbuttonFunctionalityWithUserFieldISBlank09() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{

		HighlightOnElement(searchbtn);
		String validnumber=excel.getExcelData(entervalueinsearchbox, "DisconnectionNumber",0, 1);
		Reporter.log("Valid Application Number:"+validnumber,true);
		waitForSomeTime();
		HighlightOnElement(searchbtn);
		searchbtn.click();
		waitForSomeTime();
		HighlightOnElement(action);
		action.click();
		waitForSomeTime();

		HighlightOnElement(clickonselectactiondrop);
		clickonselectactiondrop.click();
		selectValueFromDropdown("Forward");

		/*for(int i=0;i<selectdropdownvalue.size();i++)
			{
				String value=selectdropdownvalue.get(i).getText();
				if(value.equalsIgnoreCase("Forward"))
				{
					selectdropdownvalue.get(i).click();
					waitForSomeTime();
				}
			}*/
		waitForSomeTime();
		waitForSomeTime();

		HighlightOnElement(clickonselectuserdrop);
		clickonselectuserdrop.click();


		for(WebElement UserDropdown:selectdropdownvalueUser)
		{

			if(UserDropdown.isDisplayed())
			{
				HighlightOnElement(UserDropdown);
				String DropdownMenu=UserDropdown.getText();
				Reporter.log("Menu list User DROPDOWN :"+DropdownMenu,true);
			}
		}


		waitForSomeTime();
		HighlightOnElement(entercommentbox);
		excel.getExcelData(entercommentbox, "Customer ID",1, 9);
		waitForSomeTime();
		/*for(int i=1;i<selectdropdownvalueUser.size();i++)
			{
				String value=selectdropdownvalueUser.get(i).getText();
				Reporter.log("Expected result:"+value,true);
				waitForSomeTime();
			}

			waitForSomeTime();
		 */
	}



	public void toVerifySubmitbuttonFunctionalityWithCommentsFieldISBlank10() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		HighlightOnElement(searchbtn);
		String validnumber=excel.getExcelData(entervalueinsearchbox, "DisconnectionNumber",0, 1);
		Reporter.log("Valid Application Number:"+validnumber,true);
		waitForSomeTime();
		HighlightOnElement(searchbtn);
		searchbtn.click();
		waitForSomeTime();
		HighlightOnElement(action);
		action.click();
		waitForSomeTime();

		HighlightOnElement(clickonselectactiondrop);
		clickonselectactiondrop.click();
		selectValueFromDropdown("Forward");
		/*for(int i=0;i<selectdropdownvalue.size();i++)
			{
				String value=selectdropdownvalue.get(i).getText();
				if(value.equalsIgnoreCase("Forward"))
				{
					selectdropdownvalue.get(i).click();
					waitForSomeTime();
				}
			}*/
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(clickonselectuserdrop);
		clickonselectuserdrop.click();
		selectValueFromDropdown("Hari Singh (FE)");
		/*for(int i=0;i<selectdropdownvalueUser.size();i++)
			{
				String value=selectdropdownvalueUser.get(i).getText();
				if(value.equalsIgnoreCase("Hari Singh (FE)"))
				{
					selectdropdownvalueUser.get(i).click();
					waitForSomeTime();
				}
			}
		 */
		waitForSomeTime();
		HighlightOnElement(entercommentbox);
	}

	public void toVerifySubmitbuttonuploadingdocumentwithinvalidformat11() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{
		HighlightOnElement(searchbtn);
		String validnumber=excel.getExcelData(entervalueinsearchbox, "DisconnectionNumber",0, 1);
		Reporter.log("Valid Application Number:"+validnumber,true);
		waitForSomeTime();
		HighlightOnElement(searchbtn);
		searchbtn.click();
		waitForSomeTime();
		HighlightOnElement(action);
		action.click();
		waitForSomeTime();

		HighlightOnElement(clickonselectactiondrop);
		clickonselectactiondrop.click();
		selectValueFromDropdown("Forward");
		/*for(int i=0;i<selectdropdownvalue.size();i++)
			{
				String value=selectdropdownvalue.get(i).getText();
				if(value.equalsIgnoreCase("Forward"))
				{
					selectdropdownvalue.get(i).click();
					waitForSomeTime();
				}
			}*/
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(clickonselectuserdrop);
		clickonselectuserdrop.click();
		/*for(int i=0;i<selectdropdownvalueUser.size();i++)
			{
				String value=selectdropdownvalueUser.get(i).getText();
				if(value.equalsIgnoreCase("Hari Singh (FE)"))
				{
					selectdropdownvalueUser.get(i).click();
					waitForSomeTime();
				}
			}*/
		selectValueFromDropdown("Hari Singh (FE)");
		waitForSomeTime();
		HighlightOnElement(entercommentbox);
		excel.getExcelData(entercommentbox, "Customer ID",1, 9);
		waitForSomeTime();
		HighlightOnElement(uploaddocument);
		uploaddocument.click();
		waitForSomeTime();
		UpLoadFile("C:\\ILFS\\NRDA\\workspace\\NRDA_FRAMEWORK\\NRDA_PROJECT\\src\\test\\resources\\IMAGE_NRDA_WATER&SEWERAGE\\TestData.txt");
		waitForSomeTime();

	}


	@FindBy(xpath="//table[@class='ui-panelgrid ui-widget']/tbody/tr/td[2]/table/tbody/tr/td[2]/button[contains(.,'Search')]")
	private WebElement SearchButton_Fileno;

	@FindBy(xpath="(//div[@class='ui-dialog-content ui-widget-content']/div/div/table/tbody/tr/td[3]/input)[1]")
	private WebElement SubjectField;

	@FindBy(xpath="//div[@class='ui-dialog-content ui-widget-content']/div/div/center[1]/table/tbody/tr/td/button[contains(.,'Search')]")
	private WebElement SearchButton1;

	@FindBy(xpath="//div[@class='ui-dialog-content ui-widget-content']/div/div/table/tbody/tr/td[6]/input")
	private WebElement FileField;

	@FindBy(xpath="//button[contains(.,'Create New File')]")
	private WebElement CreateNewFile_Button;

	@FindBy(xpath="//button[contains(.,'Fill In Form')]")
	private WebElement FillInForm_Button;

	@FindBy(xpath="//span[contains(.,'Create File')]/../following-sibling::div/div/div/table/tbody/tr[1]/td[2]/input")
	private WebElement SubjectField1;

	@FindBy(xpath="//span[contains(.,'Create File')]/../following-sibling::div/div/div/table/tbody/tr[1]/td/table/tbody/tr/td/input")
	private WebElement FileField1;


	//@FindBy(xpath="//table[@class='ui-panelgrid ui-widget']/tbody/tr[2]/td[3]/div/div/span")
	@FindBy(xpath="//span[contains(.,'Create File')]/../following-sibling::div/div/div/table/tbody/tr[2]/td[2]/select")
	private WebElement Type_Dropdown;

	//@FindBy(xpath="//table[@class='ui-panelgrid ui-widget']/tbody/tr[2]/td[6]/div/div/span")
	@FindBy(xpath="//span[contains(.,'Create File')]/../following-sibling::div/div/div/table/tbody/tr[2]/td[4]/select")
	private WebElement Category_Dropdown;

	//@FindBy(xpath="//table[@class='ui-panelgrid ui-widget']/tbody/tr[3]/td[3]/div/div/span")
	@FindBy(xpath="//span[contains(.,'Create File')]/../following-sibling::div/div/div/table/tbody/tr[3]/td[2]/select")
	private WebElement Department_Dropdown;

	//@FindBy(xpath="//table[@class='ui-panelgrid ui-widget']/tbody/tr[3]/td[6]/div/div[2]")
	@FindBy(xpath="//span[contains(.,'Create File')]/../following-sibling::div/div/div/table/tbody/tr[3]/td[4]/div/div[2]")
	private WebElement IsConditional_Checkbox;

	@FindBy(xpath=".//*[@id='inboxForm:searchdata_data']/tr/td[1]/div/div[2]")
	private WebElement Checkbox1;

	@FindBy(xpath="//span[contains(.,'Create File')]/../following-sibling::div/div/div/center/table/tbody/tr/td/button[contains(.,'Submit')]")
	private WebElement SUBMITBTN;


	@FindBy(xpath="(//table[@class='ui-panelgrid ui-widget']/tbody/tr/td[2]/input)[1]")
	private WebElement Subject_Field;

	@FindBy(xpath="//table[@class='ui-panelgrid ui-widget']/tbody/tr/td[2]/table/tbody/tr/td[1]/input")
	private WebElement FileNo_Field;

	public void fillsubjectfileFileds() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		waitForSomeTime();
		HighlightOnElement(entercommentbox);
		excel.getExcelData(entercommentbox, "Customer ID",1, 9);
		waitForSomeTime();

		HighlightOnElement(Subject_Field);
		waitForSomeTime();
		Assert.assertTrue(Subject_Field.isEnabled(),"Test Case Pass: Subject_Field");
		//excel.getExcelData(Subject_Field, "Application_AM_LEGAL", 1, 24);
		System.out.println("Subject_Field  in Application of Water&Sewerage  LEGAL  Is Present" ); //print for eclipse console
		waitForDomElement();
		waitForSomeTime();
		HighlightOnElement(FileNo_Field);
		Assert.assertTrue(FileNo_Field.isEnabled(),"Test Case Pass: FileNo_Field");
		//excel.getExcelData(FileNo_Field, "Application_AM_LEGAL", 1, 25);
		System.out.println("FileNo_Field  in Application of Water&Sewerage  LEGAL  Is Present" ); //print for eclipse console
		waitForDomElement();
		waitForSomeTime();


		HighlightOnElement(SearchButton_Fileno);
		SearchButton_Fileno.click();
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(CreateNewFile_Button);
		CreateNewFile_Button.click();
		waitForSomeTime();
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(SubjectField1);
		//excel.getExcelData(SubjectField1, "DisconnectionNumber", 1, 5);
		SubjectField1.sendKeys("Water");
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(FileField1);
		waitForSomeTime();
		FileField1.sendKeys("123");
		//excel.getExcelData(FileField1, "DisconnectionNumber", 1, 5);
		waitForSomeTime();
		HighlightOnElement(Type_Dropdown);
		Type_Dropdown.click();
		waitForSomeTime();
		selectValueFromDropdown("File");
		HighlightOnElement(Category_Dropdown);
		Category_Dropdown.click();
		waitForSomeTime();
		selectValueFromDropdown("Case File");
		HighlightOnElement(Department_Dropdown);
		Department_Dropdown.click();
		waitForSomeTime();
		selectValueFromDropdown("WATER AND SEWERAGE SECTION");
		waitForSomeTime();
		HighlightOnElement(IsConditional_Checkbox);
		IsConditional_Checkbox.click();
		HighlightOnElement(SUBMITBTN);
		SUBMITBTN.click();
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(Checkbox1);
		Checkbox1.click();
		waitForSomeTime();
		HighlightOnElement(FillInForm_Button);
		FillInForm_Button.click();
		waitForSomeTime();
		waitForSomeTime();

		waitForSomeTime();



	}
	public void fillsubjectfileFileds1() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		waitForSomeTime();
		HighlightOnElement(entercommentbox);
		excel.getExcelData(entercommentbox, "Customer ID",1, 9);
		waitForSomeTime();

		HighlightOnElement(Subject_Field);
		waitForSomeTime();
		Assert.assertTrue(Subject_Field.isEnabled(),"Test Case Pass: Subject_Field");
		//excel.getExcelData(Subject_Field, "Application_AM_LEGAL", 1, 24);
		System.out.println("Subject_Field  in Application of Water&Sewerage  LEGAL  Is Present" ); //print for eclipse console
		waitForDomElement();
		waitForSomeTime();
		HighlightOnElement(FileNo_Field);
		Assert.assertTrue(FileNo_Field.isEnabled(),"Test Case Pass: FileNo_Field");
		//excel.getExcelData(FileNo_Field, "Application_AM_LEGAL", 1, 25);
		System.out.println("FileNo_Field  in Application of Water&Sewerage  LEGAL  Is Present" ); //print for eclipse console
		waitForDomElement();
		waitForSomeTime();


		HighlightOnElement(SearchButton_Fileno);
		SearchButton_Fileno.click();
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(CreateNewFile_Button);
		CreateNewFile_Button.click();
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(SubjectField1);
		excel.getExcelData(SubjectField1, "DisconnectionNumber", 1, 5);
		waitForSomeTime();
		HighlightOnElement(FileField1);
		excel.getExcelData(FileField1, "DisconnectionNumber", 1, 7);
		waitForSomeTime();
		HighlightOnElement(Type_Dropdown);
		Type_Dropdown.click();
		waitForSomeTime();
		selectValueFromDropdown("File");
		HighlightOnElement(Category_Dropdown);
		Category_Dropdown.click();
		waitForSomeTime();
		selectValueFromDropdown("Case File");
		HighlightOnElement(Department_Dropdown);
		Department_Dropdown.click();
		waitForSomeTime();
		selectValueFromDropdown("WATER AND SEWERAGE SECTION");
		waitForSomeTime();
		HighlightOnElement(IsConditional_Checkbox);
		IsConditional_Checkbox.click();
		HighlightOnElement(SUBMITBTN);
		SUBMITBTN.click();
		waitForSomeTime();
		waitForSomeTime();
		fluentWait(Checkbox1);
		HighlightOnElement(Checkbox1);
		Checkbox1.click();
		waitForSomeTime();
		HighlightOnElement(FillInForm_Button);
		FillInForm_Button.click();
		waitForSomeTime();
		waitForSomeTime();

		waitForSomeTime();



	}





	@FindBy(xpath="//div[@class='dash-wraper water']/div[2]/div/ul[2]/li/../li[3]/a")
	private WebElement beforepending;
	public void beforesentbackpendingcount() throws InterruptedException
	{
		HighlightOnElement(beforepending);
		Assert.assertEquals(true,beforepending.isEnabled());
		String pendingcount=beforepending.getText();;
		int beforependingcount=Integer.parseInt(pendingcount);
		waitForSomeTime();
		Reporter.log("Before Submition pending Count On Water Icon Is:" +beforependingcount,true);
		waitForSomeTime();
	}

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "file upload message".
	 * @author Sarvesh.Nellore
	 * @since 2017-09-22
	 */
	/*****************************************************************************************************/
	@FindBy(xpath="//span[contains(text(),'File uploaded Successfully')]")
	private WebElement fileuploadmessage;

	/****************************************************************************************************/
	/*
	 * This is the xpath of the WebElement "Home link".
	 * @author Sarvesh.Nellore
	 * @since 2017-09-21
	 */
	/*****************************************************************************************************/

	@FindBy(xpath="//div[@class='col-lg-12 col-md-12 padmar0']/ul/li/../li[1]/a/span/img")
	private WebElement homelink;

	@FindBy(xpath="//div[@class='dash-wraper water']/div[2]/div[1]/ul[2]/li[3]")
	private WebElement AfterPending;

	@FindBy(xpath="//html/body/div[2]/table[2]/tbody/tr/td[2]/table/tbody/tr/td/form/div/div[2]/div[2]/div/div/div[1]/div/div[1]/table/tbody/tr[1]/td[4]")
	private WebElement ApplicationNumber;

	public void aftersentbackpendingcount() throws InterruptedException
	{
		HighlightOnElement(AfterPending);
		Assert.assertEquals(true,AfterPending.isEnabled());
		String pendingcount=AfterPending.getText();;
		int afterpendingcount=Integer.parseInt(pendingcount);
		waitForSomeTime();
		Reporter.log("After Submition pending Count On Water Icon Is:" +afterpendingcount,true);
		waitForSomeTime();
	}


	public void toverifySubmitFunctionalitywithActionAsForward12() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{
		String pendingcount=beforepending.getText();;
		int beforependingcount=Integer.parseInt(pendingcount);
		System.out.println("BeforePending Count:"+beforependingcount);
		HighlightOnElement(PendingApplication);
		Assert.assertTrue(PendingApplication.isEnabled(),"Test Case PAss");
		PendingApplication.click();
		waitForSomeTime();
		waitForSomeTime();
		waitForelementPresent(entervalueinsearchbox);
		Reporter.log("Expected result:click on PendingApplication Link",true);
		HighlightOnElement(entervalueinsearchbox);

		//String Validnumber=ApplicationNumber.getText();
		String validnumber=excel.getExcelData(entervalueinsearchbox, "DisconnectionNumber",0, 1);
		Reporter.log("Valid Application Number:"+validnumber,true);
		//entervalueinsearchbox.sendKeys(Validnumber);
		waitForSomeTime();
		HighlightOnElement(searchbtn);
		searchbtn.click();
		waitForSomeTime();
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(action);
		action.click();
		waitForSomeTime();
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(clickonselectactiondrop);
		clickonselectactiondrop.click();

		selectValueFromDropdown("Forward");
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(clickonselectuserdrop);
		clickonselectuserdrop.click();

		selectValueFromDropdown("Hari Singh (FE)");

		/*selectValueFromDropdown("Hari Singh (FE)");
			for(int i=0;i<selectdropdownvalueUser.size();i++)
			{
				String value=selectdropdownvalueUser.get(i).getText();
				if(value.equalsIgnoreCase("Hari Singh (FE)"))
				{
					selectdropdownvalueUser.get(i).click();
					waitForSomeTime();
				}
			}*/
		fillsubjectfileFileds();
		waitForSomeTime();
		/*HighlightOnElement(entercommentbox);
			excel.getExcelData(entercommentbox, "Customer ID",1, 9);*/
		waitForSomeTime();
		HighlightOnElement(uploaddocument);
		uploaddocument.click();
		waitForSomeTime();
		UpLoadFile("C:\\ILFS\\NRDA\\workspace\\NRDA_FRAMEWORK\\NRDA_PROJECT\\src\\test\\resources\\IMAGE_NRDA_WATER&SEWERAGE\\Raipur.jpg");
		waitForSomeTime();
		String Expected=fileuploadmessage.getText();
		String Actual="File uploaded Successfully";
		Assert.assertEquals(Expected,Actual,"Test case pass");
		Reporter.log("Expected result:"+Expected,true);
		waitForSomeTime();
		JavascriptExecutor js = (JavascriptExecutor)driver;
		js.executeScript("window.scrollBy(0,250)", "");
		HighlightOnElement(Submit_Button);
		waitForSomeTime();
		Submit_Button.click();
		Reporter.log("click on Submit button succesfully",true);
		waitForSomeTime();
		Thread.sleep(60000);
		waitForSomeTime();
		homelink.click();
		waitForSomeTime();
		waitForSomeTime();
		waitForSomeTime();

		String Aftpendingcount=AfterPending.getText();;
		int afterpendingcount=Integer.parseInt(Aftpendingcount);
		System.out.println("AfterPending Count:"+afterpendingcount);
		waitForSomeTime();
		if(beforependingcount==afterpendingcount+m1)
		{
			Reporter.log("Test case Pass pending count Decreased", true);
			waitForSomeTime();
		}
		else
		{

			Reporter.log("Test case Fail when pending count Same", true);
		}
		waitForSomeTime();

	}



	public void toforwardApplicationJEtoFE() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{
		String pendingcount=beforepending.getText();;
		int beforependingcount=Integer.parseInt(pendingcount);
		System.out.println("BeforePending Count:"+beforependingcount);
		HighlightOnElement(PendingApplication);
		Assert.assertTrue(PendingApplication.isEnabled(),"Test Case PAss");
		PendingApplication.click();
		waitForSomeTime();
		waitForSomeTime();
		waitForelementPresent(entervalueinsearchbox);
		Reporter.log("Expected result:click on PendingApplication Link",true);
		HighlightOnElement(entervalueinsearchbox);

		//String Validnumber=ApplicationNumber.getText();
		String validnumber=excel.getExcelData(entervalueinsearchbox, "DisconnectionNumber",0, 1);
		Reporter.log("Valid Application Number:"+validnumber,true);
		//entervalueinsearchbox.sendKeys(Validnumber);
		waitForSomeTime();
		HighlightOnElement(searchbtn);
		searchbtn.click();
		waitForSomeTime();
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(action);
		action.click();
		waitForSomeTime();
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(clickonselectactiondrop);
		clickonselectactiondrop.click();

		selectValueFromDropdown("Forward");
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(clickonselectuserdrop);
		clickonselectuserdrop.click();

		selectValueFromDropdown("Hari Singh (FE)");

		/*selectValueFromDropdown("Hari Singh (FE)");
			for(int i=0;i<selectdropdownvalueUser.size();i++)
			{
				String value=selectdropdownvalueUser.get(i).getText();
				if(value.equalsIgnoreCase("Hari Singh (FE)"))
				{
					selectdropdownvalueUser.get(i).click();
					waitForSomeTime();
				}
			}*/
		waitForSomeTime();
		HighlightOnElement(entercommentbox);
		//excel.getExcelData(entercommentbox, "Customer ID",1, 9);
		entercommentbox.sendKeys("Application Forwarded to Field Engineer");
		waitForSomeTime();
		HighlightOnElement(uploaddocument);
		uploaddocument.click();
		waitForSomeTime();
		UpLoadFile("C:\\ILFS\\NRDA\\workspace\\NRDA_FRAMEWORK\\NRDA_PROJECT\\src\\test\\resources\\IMAGE_NRDA_WATER&SEWERAGE\\Raipur.jpg");
		waitForSomeTime();
		String Expected=fileuploadmessage.getText();
		String Actual="File uploaded Successfully";
		Assert.assertEquals(Expected,Actual,"Test case pass");
		Reporter.log("Expected result:"+Expected,true);
		waitForSomeTime();
		JavascriptExecutor js = (JavascriptExecutor)driver;
		js.executeScript("window.scrollBy(0,250)", "");
		HighlightOnElement(Submit_Button);
		waitForSomeTime();
		Submit_Button.click();
		Reporter.log("click on Submit button succesfully",true);
		waitForSomeTime();
		Thread.sleep(30000);
		waitForelementPresent(entervalueinsearchbox);
		HighlightOnElement(entervalueinsearchbox);
		waitForSomeTime();
		HighlightOnElement(homelink);
		homelink.click();
		waitForSomeTime();
		waitForSomeTime();
		waitForSomeTime();

		String Aftpendingcount=AfterPending.getText();;
		int afterpendingcount=Integer.parseInt(Aftpendingcount);
		System.out.println("AfterPending Count:"+afterpendingcount);
		waitForSomeTime();
		if(beforependingcount==afterpendingcount+m1)
		{
			Reporter.log("Test case Pass pending count Decreased", true);
			waitForSomeTime();
		}
		else
		{

			Reporter.log("Test case Fail when pending count Same", true);
		}
		waitForSomeTime();

	}

	public void toforwardApplicationJEtoEE() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{
		String pendingcount=beforepending.getText();;
		int beforependingcount=Integer.parseInt(pendingcount);
		System.out.println("BeforePending Count:"+beforependingcount);
		HighlightOnElement(PendingApplication);
		Assert.assertTrue(PendingApplication.isEnabled(),"Test Case PAss");
		PendingApplication.click();
		waitForSomeTime();
		waitForSomeTime();
		waitForelementPresent(entervalueinsearchbox);
		Reporter.log("Expected result:click on PendingApplication Link",true);
		HighlightOnElement(entervalueinsearchbox);

		//String Validnumber=ApplicationNumber.getText();
		String validnumber=excel.getExcelData(entervalueinsearchbox, "DisconnectionNumber",0, 1);
		Reporter.log("Valid Application Number:"+validnumber,true);
		//entervalueinsearchbox.sendKeys(Validnumber);
		waitForSomeTime();
		HighlightOnElement(searchbtn);
		searchbtn.click();
		waitForSomeTime();
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(action);
		action.click();
		waitForSomeTime();
		waitForSomeTime();
		waitForSomeTime();
		ScroolDown();
		HighlightOnElement(clickonselectactiondrop);
		clickonselectactiondrop.click();

		selectValueFromDropdown("Forward");
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(clickonselectuserdrop);
		clickonselectuserdrop.click();

		selectValueFromDropdown("Rajesh Singh (EE)");

		/*selectValueFromDropdown("Hari Singh (FE)");
			for(int i=0;i<selectdropdownvalueUser.size();i++)
			{
				String value=selectdropdownvalueUser.get(i).getText();
				if(value.equalsIgnoreCase("Hari Singh (FE)"))
				{
					selectdropdownvalueUser.get(i).click();
					waitForSomeTime();
				}
			}*/
		waitForSomeTime();
		HighlightOnElement(entercommentbox);
		//excel.getExcelData(entercommentbox, "Customer ID",1, 9);
		entercommentbox.sendKeys("Application Forwarded to Executive Engineer");
		waitForSomeTime();
		HighlightOnElement(uploaddocument);
		uploaddocument.click();
		waitForSomeTime();
		UpLoadFile("C:\\ILFS\\NRDA\\workspace\\NRDA_FRAMEWORK\\NRDA_PROJECT\\src\\test\\resources\\IMAGE_NRDA_WATER&SEWERAGE\\Raipur.jpg");
		waitForSomeTime();
		String Expected=fileuploadmessage.getText();
		String Actual="File uploaded Successfully";
		Assert.assertEquals(Expected,Actual,"Test case pass");
		Reporter.log("Expected result:"+Expected,true);
		waitForSomeTime();
		JavascriptExecutor js = (JavascriptExecutor)driver;
		js.executeScript("window.scrollBy(0,250)", "");
		HighlightOnElement(Submit_Button);
		waitForSomeTime();
		Submit_Button.click();
		Reporter.log("click on Submit button succesfully",true);
		waitForSomeTime();
		Thread.sleep(30000);
		waitForelementPresent(entervalueinsearchbox);
		HighlightOnElement(entervalueinsearchbox);
		waitForSomeTime();
		HighlightOnElement(homelink);
		homelink.click();
		waitForSomeTime();
		waitForSomeTime();
		waitForSomeTime();

		String Aftpendingcount=AfterPending.getText();;
		int afterpendingcount=Integer.parseInt(Aftpendingcount);
		System.out.println("AfterPending Count:"+afterpendingcount);
		waitForSomeTime();
		if(beforependingcount==afterpendingcount+m1)
		{
			Reporter.log("Test case Pass pending count Decreased", true);
			waitForSomeTime();
		}
		else
		{

			Reporter.log("Test case Fail when pending count Same", true);
		}
		waitForSomeTime();

	}


	public void toverifySubmitFunctionalitywithActionAsSentBack13() throws InterruptedException, AWTException, EncryptedDocumentException, InvalidFormatException, IOException	
	{

		//beforesentbackpendingcount();

		String BeforePendingCount=beforepending.getText();

		int beforependingcount=Integer.parseInt(BeforePendingCount);
		System.out.println("Before Pending Count:"+beforependingcount);

		HighlightOnElement(PendingApplication);
		Assert.assertTrue(PendingApplication.isEnabled(),"Test Case PAss");
		PendingApplication.click();
		waitForSomeTime();
		waitForVisibleElement("//span[contains(.,'Applications List')]/../following-sibling::div/div[1]/div/table/tbody/tr[2]/td/input");
		waitForSomeTime();
		//fluentWait(entervalueinsearchbox)
		//waitForSomeTime();
		Reporter.log("Expected result:click on PendingApplication Link",true);
		HighlightOnElement(entervalueinsearchbox);
		//String Validnumber=ApplicationNumber.getText();
		String validnumber=excel.getExcelData(entervalueinsearchbox, "DisconnectionNumber",0, 1);
		Reporter.log("Valid Application Number:"+validnumber,true);
		//entervalueinsearchbox.sendKeys(Validnumber);
		waitForSomeTime();
		HighlightOnElement(searchbtn);
		searchbtn.click();
		waitForSomeTime();
		HighlightOnElement(action);
		action.click();
		//fluentWait(clickonselectactiondrop);
		waitForVisibleElement("//div[@id='inboxForm:Nb']/div/div[3]/div[2]/center/table[1]/tbody/tr/td[2]/div/div[3]/span");

		HighlightOnElement(clickonselectactiondrop);
		clickonselectactiondrop.click();
		selectValueFromDropdown("Send Back");
		/*for(int i=0;i<selectdropdownvalue.size();i++)
			{
				String value=selectdropdownvalue.get(i).getText();
				if(value.equalsIgnoreCase("Send Back"))
				{
					selectdropdownvalue.get(i).click();
					waitForSomeTime();
				}
			}*/
		waitForSomeTime();
		waitForSomeTime();
		fillsubjectfileFileds();
		/*HighlightOnElement(entercommentbox);
			excel.getExcelData(entercommentbox, "Customer ID",3, 8);*/
		waitForSomeTime();
		HighlightOnElement(uploaddocument);
		uploaddocument.click();
		waitForSomeTime();
		UpLoadFile("C:\\ILFS\\NRDA\\workspace\\NRDA_FRAMEWORK\\NRDA_PROJECT\\src\\test\\resources\\IMAGE_NRDA_WATER&SEWERAGE\\Raipur.jpg");
		waitForSomeTime();

		String Expected=fileuploadmessage.getText();
		String Actual="File uploaded Successfully";
		Assert.assertEquals(Expected,Actual,"Test case pass");
		Reporter.log("Expected result:"+Expected,true);
		waitForSomeTime();
		JavascriptExecutor js = (JavascriptExecutor)driver;
		js.executeScript("window.scrollBy(0,250)", "");
		HighlightOnElement(Submit_Button);
		waitForSomeTime();
		Submit_Button.click();
		Reporter.log("click on Submit button succesfully",true);
		fluentWait(homelink);
		waitForSomeTime();
		homelink.click();
		waitForSomeTime(); 
		waitForSomeTime(); 
		waitForSomeTime(); 
		//fluentWait(beforepending);
		//aftersentbackpendingcount();
		String AfterPendingCount=beforepending.getText();
		int afterpendingcount=Integer.parseInt(AfterPendingCount);

		System.out.println("After Pending Count:"+afterpendingcount);

		if(BeforePendingCount.equals(afterpendingcount+1))
		{
			Reporter.log("Test case Pass pending count Increased", true);
			waitForSomeTime();
		}
		else
		{

			Reporter.log("Test case fail  pending count not Increased", true);
		}
		waitForSomeTime();

	}

	@FindBy(xpath="//div[@class='dash-wraper water']/div[2]/div/ul[2]/li/../li[2]/a")
	private WebElement beforereject;
	public void beforeRejectcount() throws InterruptedException
	{
		HighlightOnElement(beforereject);
		Assert.assertEquals(true,beforereject.isEnabled());
		String rejectcount=beforereject.getText();;
		int beforerejectcount=Integer.parseInt(rejectcount);
		waitForSomeTime();
		Reporter.log("Before Submition Reject Count On Water Icon Is:" +beforerejectcount,true);
		waitForSomeTime();
	}


	@FindBy(xpath="//div[@class='dash-wraper water']/div[2]/div/ul[2]/li/../li[2]/a")
	private WebElement afterreject;
	public void afterRejectcount() throws InterruptedException
	{
		HighlightOnElement(afterreject);
		Assert.assertEquals(true,afterreject.isEnabled());
		String rejectcount=afterreject.getText();;
		int afterrejectcount=Integer.parseInt(rejectcount);
		waitForSomeTime();
		Reporter.log("After Submition Reject Count On Water Icon Is:" +afterrejectcount,true);
		waitForSomeTime();
	}


	public void toverifySubmitFunctionalitywithActionAsReject14() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{
		String rejectcount=beforereject.getText();;
		int beforerejectcount=Integer.parseInt(rejectcount);
		System.out.println("Before Reject Count is:"+beforerejectcount);
		HighlightOnElement(PendingApplication);
		Assert.assertTrue(PendingApplication.isEnabled(),"Test Case PAss");
		PendingApplication.click();
		waitForSomeTime();
		waitForVisibleElement("//span[contains(.,'Applications List')]/../following-sibling::div/div[1]/div/table/tbody/tr[2]/td/input");
		waitForSomeTime();
		Reporter.log("Expected result:click on PendingApplication Link",true);
		HighlightOnElement(entervalueinsearchbox);
		//String Validnumber=ApplicationNumber.getText();
		String validnumber=excel.getExcelData(entervalueinsearchbox, "DisconnectionNumber",0, 1);
		//Reporter.log("Valid Application Number:"+Validnumber,true);
		//entervalueinsearchbox.sendKeys(Validnumber);

		waitForSomeTime();
		HighlightOnElement(searchbtn);
		searchbtn.click();
		waitForSomeTime();
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(action);
		action.click();
		waitForSomeTime();
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(clickonselectactiondrop);
		clickonselectactiondrop.click();
		selectValueFromDropdown("Reject");
		/*for(int i=0;i<selectdropdownvalue.size();i++)
			{
				String value=selectdropdownvalue.get(i).getText();
				if(value.equalsIgnoreCase("Reject"))
				{
					selectdropdownvalue.get(i).click();
					waitForSomeTime();
				}
			}
			waitForSomeTime();*/
		waitForSomeTime();

		HighlightOnElement(entercommentbox);
		excel.getExcelData(entercommentbox, "Customer ID",2, 8);
		waitForSomeTime();
		HighlightOnElement(uploaddocument);
		uploaddocument.click();
		waitForSomeTime();
		UpLoadFile("C:\\ILFS\\NRDA\\workspace\\NRDA_FRAMEWORK\\NRDA_PROJECT\\src\\test\\resources\\IMAGE_NRDA_WATER&SEWERAGE\\Raipur.jpg");
		waitForSomeTime();
		String Expected=fileuploadmessage.getText();
		String Actual="File uploaded Successfully";
		Assert.assertEquals(Expected,Actual,"Test case pass");
		Reporter.log("Expected result:"+Expected,true);
		waitForSomeTime();
		JavascriptExecutor js = (JavascriptExecutor)driver;
		js.executeScript("window.scrollBy(0,250)", "");
		HighlightOnElement(Submit_Button);
		waitForSomeTime();
		Submit_Button.click();
		Reporter.log("click on Submit button succesfully",true);
		Thread.sleep(30000);
		homelink.click();
		waitForSomeTime();
		String rejectcounT=afterreject.getText();;
		int afterrejectcount=Integer.parseInt(rejectcounT);
		if(beforerejectcount==afterrejectcount+m1)
		{
			Reporter.log("Test case Pass Reject count Increased", true);
			waitForSomeTime();
		}
		else
		{

			Reporter.log("Test case Fail when Reject count Same", true);
		}
		waitForSomeTime();


	}

	@FindBy(xpath="//button[contains(.,'Close')]")
	private WebElement close_Button;

	public void toverifyfunctionalityofclosebutton15() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{

		HighlightOnElement(PendingApplication);
		Assert.assertTrue(PendingApplication.isEnabled(),"Test Case PAss");
		PendingApplication.click();
		waitForSomeTime();
		waitForSomeTime();

		Reporter.log("Expected result:click on PendingApplication Link",true);

		element = (new WebDriverWait(driver, 30)).until(ExpectedConditions
				.visibilityOfElementLocated(By
						.xpath("//span[contains(.,'Applications List')]/../following-sibling::div/div[1]/div/table/tbody/tr[2]/td/input")));


		HighlightOnElement(entervalueinsearchbox);
		//String Validnumber=ApplicationNumber.getText();
		String validnumber=excel.getExcelData(entervalueinsearchbox, "DisconnectionNumber",0, 1);
		Reporter.log("Valid Application Number:"+validnumber,true);
		//entervalueinsearchbox.sendKeys(Validnumber);
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(searchbtn);
		searchbtn.click();
		//fluentWait(element);
		isElementNotDisplayed(action, 10);
		//element = (new WebDriverWait(driver, 50)).until(ExpectedConditions.eleme);
		HighlightOnElement(action);
		action.click();
		element = (new WebDriverWait(driver, 50)).until(ExpectedConditions.visibilityOf(clickonselectactiondrop));
		HighlightOnElement(clickonselectactiondrop);
		HighlightOnElement(entercommentbox);
		HighlightOnElement(Submit_Button);
		HighlightOnElement(close_Button);
		waitForSomeTime();
		close_Button.click();
		Reporter.log("click on Close button succesfully",true);
		waitForSomeTime();
		Thread.sleep(18000);

	}

	public void toVerifyJEToEEForwardAction16() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{
		beforesentbackpendingcount();

		HighlightOnElement(PendingApplication);
		Assert.assertTrue(PendingApplication.isEnabled(),"Test Case PAss");
		PendingApplication.click();
		waitForSomeTime();
		waitForSomeTime();
		Reporter.log("Expected result:click on PendingApplication Link",true);



		HighlightOnElement(entervalueinsearchbox);

		//String Validnumber=ApplicationNumber.getText();
		String validnumber=excel.getExcelData(entervalueinsearchbox, "Disconnection",0, 1);
		Reporter.log("Valid Application Number:"+validnumber,true);
		//entervalueinsearchbox.sendKeys(Validnumber);
		waitForSomeTime();
		HighlightOnElement(searchbtn);
		searchbtn.click();
		waitForSomeTime();
		HighlightOnElement(action);
		action.click();
		waitForSomeTime();

		HighlightOnElement(clickonselectactiondrop);
		clickonselectactiondrop.click();

		for(int i=0;i<selectdropdownvalue.size();i++)
		{
			String value=selectdropdownvalue.get(i).getText();
			if(value.equalsIgnoreCase("Forward"))
			{
				selectdropdownvalue.get(i).click();
				waitForSomeTime();
			}
		}
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(clickonselectuserdrop);
		clickonselectuserdrop.click();
		for(int i=0;i<selectdropdownvalueUser.size();i++)
		{
			String value=selectdropdownvalueUser.get(i).getText();
			if(value.equalsIgnoreCase("Rajesh Singh (EE)"))
			{
				selectdropdownvalueUser.get(i).click();
				waitForSomeTime();
			}
		}

		waitForSomeTime();
		HighlightOnElement(entercommentbox);
		excel.getExcelData(entercommentbox, "Customer ID",1, 9);
		waitForSomeTime();
		HighlightOnElement(uploaddocument);
		uploaddocument.click();
		waitForSomeTime();
		UpLoadFile("C:\\ILFS\\NRDA\\workspace\\NRDA_FRAMEWORK\\NRDA_PROJECT\\src\\test\\resources\\IMAGE_NRDA_WATER&SEWERAGE\\Raipur.jpg");
		waitForSomeTime();

		waitForSomeTime();
		String Expected=fileuploadmessage.getText();
		String Actual="File uploaded Successfully";
		Assert.assertEquals(Expected,Actual,"Test case pass");
		Reporter.log("Expected result:"+Expected,true);
		waitForSomeTime();
		JavascriptExecutor js = (JavascriptExecutor)driver;
		js.executeScript("window.scrollBy(0,250)", "");
		HighlightOnElement(Submit_Button);
		waitForSomeTime();
		Submit_Button.click();
		Reporter.log("click on Submit button succesfully",true);
		waitForSomeTime();
		waitForSomeTime();
		homelink.click();
		waitForSomeTime();
		aftersentbackpendingcount();


		if(beforepending==AfterPending)
		{
			Reporter.log("Test case fail pending count Matched", true);
			waitForSomeTime();
		}
		else
		{

			Reporter.log("Test case pass when pending count not Matched", true);
		}
		waitForSomeTime();

	}


	@FindBy(xpath="//a[contains(.,'Application Status/आवेदन की स्थिति')]")
	private WebElement ApplicationStatus;

	@FindBy(xpath="//span[@style='width:100%;']/div/div/table/tbody/tr/td/input")
	private WebElement ApplicationNumberField;

	@FindBy(xpath="//span[@style='width:100%;']/div/div/table/tbody/tr/td/button[contains(.,'Search')]")
	private WebElement SearchButton;

	@FindBy(xpath="//span[@style='width:100%;']/div/div/table/tbody/tr/td/button[contains(.,'Reset')]")
	private WebElement ResetButton;

	@FindBy(xpath="//a[contains(.,'Submitted Applications')]")
	private WebElement SubmittedApplications;

	@FindBy(xpath="//a[contains(.,'DISCONNECTION OF WATER CONNECTION')]")
	private WebElement DisConnectionofWaterConnection;

	@FindBy(xpath="//img[@src='/NRDAuthority/resources/images/edit-icon.png']")
	private WebElement ActionButton;

	@FindBy(xpath="//a[contains(.,'Water Disconnection Details/जल वियोग विवरण')]")
	private WebElement WaterDisconnectionDetail;



	public void toverifysendbackapplicationtoJE() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		waitForSomeTime();
		HighlightOnElement(ApplicationStatus);
		ApplicationStatus.click();
		waitForSomeTime();
		waitForSomeTime();
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(ApplicationNumberField);
		excel.getExcelData(ApplicationNumberField, "DisconnectionNumber", 0, 1);
		waitForSomeTime();
		HighlightOnElement(SearchButton);
		SearchButton.click();
		waitForSomeTime();
		HighlightOnElement(SubmittedApplications);
		SubmittedApplications.click();
		waitForSomeTime();
		HighlightOnElement(DisConnectionofWaterConnection);
		DisConnectionofWaterConnection.click();
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(ActionButton);
		ActionButton.click();
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(WaterDisconnectionDetail);
		WaterDisconnectionDetail.click();
		waitForSomeTime();
		waitForSomeTime();waitForSomeTime();
		waitForSomeTime();
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("alert('Please Enter the Captcha')");
		acceptAlert();
		waitForSomeTime();
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(Submit_Button);
		Submit_Button.click();
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver).withTimeout(600, TimeUnit.SECONDS).ignoring(NoSuchElementException.class);
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//a[contains(text(),'Logout')]")));


	}



	@FindBy(xpath="(//input[@title='Subject'])[1]")
	private WebElement Subject_Field1;

	@FindBy(xpath="(//input[@title='File Number'])[1]")
	private WebElement File_Field;

	public void toverifythefieldnofunctionality() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{


		HighlightOnElement(entervalueinsearchbox);
		String validnumber=excel.getExcelData(entervalueinsearchbox, "DisconnectionNumber",0, 1);
		waitForSomeTime();
		HighlightOnElement(searchbtn);
		searchbtn.click();
		waitForSomeTime();
		HighlightOnElement(action);
		action.click();
		waitForSomeTime();
		waitForSomeTime();
		ScroolDown();
		ScroolDown();
		HighlightOnElement(clickonselectactiondrop);
		clickonselectactiondrop.click();

		selectValueFromDropdown("Forward for Final Approval");
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(entercommentbox);
		entercommentbox.sendKeys("Application Approved");
		waitForSomeTime();
		HighlightOnElement(File_Field);
		WebElement fieldName = File_Field;
		fieldName.sendKeys("1234");
		String fieldNameVal = fieldName.getAttribute("value");
		if(fieldNameVal.contentEquals("1234")){
			System.out.println("Field is editable");
		}
		else{
			System.out.println("Field is non editable" + fieldNameVal);
		}

		ScroolUp();
		ScroolUp();


	}

	public void toverifytheSubjectfunctionality() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{


		HighlightOnElement(entervalueinsearchbox);
		String validnumber=excel.getExcelData(entervalueinsearchbox, "DisconnectionNumber",0, 1);
		waitForSomeTime();
		HighlightOnElement(searchbtn);
		searchbtn.click();
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(action);
		action.click();
		waitForSomeTime();
		waitForSomeTime();

		ScroolDown();
		HighlightOnElement(clickonselectactiondrop);
		clickonselectactiondrop.click();

		selectValueFromDropdown("Forward for Final Approval");
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(entercommentbox);
		entercommentbox.sendKeys("Application Approved");
		waitForSomeTime();
		HighlightOnElement(Subject_Field1);
		WebElement fieldName = Subject_Field1;
		fieldName.sendKeys("Sarvesh");
		String fieldNameVal = fieldName.getAttribute("value");
		if(fieldNameVal.contentEquals("Sarvesh")){
			System.out.println("Field is editable");
		}
		else{
			System.out.println("Field is non editable" + fieldNameVal);
		}

		ScroolUp();


	}


	public void toVerifySubmitbuttonFunctionalityWithCommentsFieldISBlank() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		HighlightOnElement(searchbtn);
		String validnumber=excel.getExcelData(entervalueinsearchbox, "DisconnectionNumber",0, 1);
		Reporter.log("Valid Application Number:"+validnumber,true);
		waitForSomeTime();
		HighlightOnElement(searchbtn);
		searchbtn.click();
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(action);
		action.click();
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(clickonselectactiondrop);
		clickonselectactiondrop.click();
		selectValueFromDropdown("Forward for Final Approval");
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(clickonselectuserdrop);
		clickonselectuserdrop.click();
		selectValueFromDropdown("Hari Singh (FE)");
		waitForSomeTime();	
		waitForSomeTime();
		HighlightOnElement(entercommentbox);
	}

	public void toVerifySubmitbuttonuploadingdocumentwithinvalidformat() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{
		HighlightOnElement(searchbtn);
		String validnumber=excel.getExcelData(entervalueinsearchbox, "DisconnectionNumber",0, 1);
		Reporter.log("Valid Application Number:"+validnumber,true);
		waitForSomeTime();
		HighlightOnElement(searchbtn);
		searchbtn.click();
		waitForSomeTime();
		HighlightOnElement(action);
		action.click();
		waitForSomeTime();

		HighlightOnElement(clickonselectactiondrop);
		clickonselectactiondrop.click();
		selectValueFromDropdown("Forward for Final Approval");

		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(clickonselectuserdrop);
		clickonselectuserdrop.click();
		waitForSomeTime();
		selectValueFromDropdown("Hari Singh (FE)");
		waitForSomeTime();
		HighlightOnElement(entercommentbox);
		excel.getExcelData(entercommentbox, "Customer ID",1, 9);
		waitForSomeTime();
		HighlightOnElement(uploaddocument);
		uploaddocument.click();
		waitForSomeTime();
		UpLoadFile("C:\\ILFS\\NRDA\\workspace\\NRDA_FRAMEWORK\\NRDA_PROJECT\\src\\test\\resources\\IMAGE_NRDA_WATER&SEWERAGE\\TestData.txt");
		waitForSomeTime();

	}


	public void toverifySubmitFunctionalitywithActionAsForward() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{
		String pendingcount=beforepending.getText();;
		int beforependingcount=Integer.parseInt(pendingcount);
		System.out.println("BeforePending Count:"+beforependingcount);
		HighlightOnElement(PendingApplication);
		Assert.assertTrue(PendingApplication.isEnabled(),"Test Case PAss");
		PendingApplication.click();
		waitForSomeTime();
		waitForSomeTime();
		waitForelementPresent(entervalueinsearchbox);
		Reporter.log("Expected result:click on PendingApplication Link",true);
		HighlightOnElement(entervalueinsearchbox);
		String validnumber=excel.getExcelData(entervalueinsearchbox, "DisconnectionNumber",0, 1);
		Reporter.log("Valid Application Number:"+validnumber,true);
		//entervalueinsearchbox.sendKeys(Validnumber);
		waitForSomeTime();
		HighlightOnElement(searchbtn);
		searchbtn.click();
		waitForSomeTime();
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(action);
		action.click();
		waitForSomeTime();
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(clickonselectactiondrop);
		clickonselectactiondrop.click();

		selectValueFromDropdown("Forward for Final Approval");
		waitForSomeTime();
		waitForSomeTime();
		HighlightOnElement(clickonselectuserdrop);
		clickonselectuserdrop.click();

		selectValueFromDropdown("Hari Singh (FE)");


		//fillsubjectfileFileds();
		waitForSomeTime();
		HighlightOnElement(entercommentbox);
		entercommentbox.sendKeys("Application Forwarded to final Approval");
		waitForSomeTime();
		HighlightOnElement(uploaddocument);
		uploaddocument.click();
		waitForSomeTime();
		UpLoadFile("C:\\ILFS\\NRDA\\workspace\\NRDA_FRAMEWORK\\NRDA_PROJECT\\src\\test\\resources\\IMAGE_NRDA_WATER&SEWERAGE\\Raipur.jpg");
		waitForSomeTime();
		String Expected=fileuploadmessage.getText();
		String Actual="File uploaded Successfully";
		Assert.assertEquals(Expected,Actual,"Test case pass");
		Reporter.log("Expected result:"+Expected,true);
		waitForSomeTime();
		JavascriptExecutor js = (JavascriptExecutor)driver;
		js.executeScript("window.scrollBy(0,250)", "");
		HighlightOnElement(Submit_Button);
		waitForSomeTime();
		Submit_Button.click();
		Reporter.log("click on Submit button succesfully",true);
		waitForSomeTime();
		Thread.sleep(60000);
		waitForSomeTime();
		homelink.click();
		waitForSomeTime();
		waitForSomeTime();
		waitForSomeTime();

		String Aftpendingcount=AfterPending.getText();;
		int afterpendingcount=Integer.parseInt(Aftpendingcount);
		System.out.println("AfterPending Count:"+afterpendingcount);
		waitForSomeTime();
		if(beforependingcount==afterpendingcount+m1)
		{
			Reporter.log("Test case Pass pending count Decreased", true);
			waitForSomeTime();
		}
		else
		{

			Reporter.log("Test case Fail when pending count Same", true);
		}
		waitForSomeTime();

	}



}

